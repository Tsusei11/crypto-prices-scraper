<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1734" onload="init(evt)" viewBox="0 0 1200 1734" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1734" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1717.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1717.00"> </text><svg id="frames" x="10" width="1180" total_samples="81"><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (3 samples, 3.70%)</title><rect x="0.0000%" y="1653" width="3.7037%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1663.50">&lt;ppr..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (3 samples, 3.70%)</title><rect x="0.0000%" y="1637" width="3.7037%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1647.50">back..</text></g><g><title>backtrace::backtrace::libunwind::trace (3 samples, 3.70%)</title><rect x="0.0000%" y="1621" width="3.7037%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1631.50">back..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (3 samples, 3.70%)</title><rect x="3.7037%" y="965" width="3.7037%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="3"/><text x="3.9537%" y="975.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (3 samples, 3.70%)</title><rect x="3.7037%" y="949" width="3.7037%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="3"/><text x="3.9537%" y="959.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (3 samples, 3.70%)</title><rect x="3.7037%" y="933" width="3.7037%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="3"/><text x="3.9537%" y="943.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (3 samples, 3.70%)</title><rect x="3.7037%" y="917" width="3.7037%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="3"/><text x="3.9537%" y="927.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (3 samples, 3.70%)</title><rect x="3.7037%" y="901" width="3.7037%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="3"/><text x="3.9537%" y="911.50">toki..</text></g><g><title>tokio::runtime::driver::Driver::park (3 samples, 3.70%)</title><rect x="3.7037%" y="885" width="3.7037%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="3"/><text x="3.9537%" y="895.50">toki..</text></g><g><title>tokio::runtime::driver::TimeDriver::park (3 samples, 3.70%)</title><rect x="3.7037%" y="869" width="3.7037%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="3"/><text x="3.9537%" y="879.50">toki..</text></g><g><title>tokio::runtime::time::Driver::park (3 samples, 3.70%)</title><rect x="3.7037%" y="853" width="3.7037%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="3"/><text x="3.9537%" y="863.50">toki..</text></g><g><title>tokio::runtime::time::Driver::park_internal (3 samples, 3.70%)</title><rect x="3.7037%" y="837" width="3.7037%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="3"/><text x="3.9537%" y="847.50">toki..</text></g><g><title>tokio::runtime::time::Driver::park_thread_timeout (3 samples, 3.70%)</title><rect x="3.7037%" y="821" width="3.7037%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="3"/><text x="3.9537%" y="831.50">toki..</text></g><g><title>tokio::runtime::driver::IoStack::park_timeout (3 samples, 3.70%)</title><rect x="3.7037%" y="805" width="3.7037%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="3"/><text x="3.9537%" y="815.50">toki..</text></g><g><title>tokio::runtime::io::driver::Driver::park_timeout (3 samples, 3.70%)</title><rect x="3.7037%" y="789" width="3.7037%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="3"/><text x="3.9537%" y="799.50">toki..</text></g><g><title>tokio::runtime::io::driver::Driver::turn (3 samples, 3.70%)</title><rect x="3.7037%" y="773" width="3.7037%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="3"/><text x="3.9537%" y="783.50">toki..</text></g><g><title>mio::poll::Poll::poll (3 samples, 3.70%)</title><rect x="3.7037%" y="757" width="3.7037%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="3"/><text x="3.9537%" y="767.50">mio:..</text></g><g><title>mio::sys::unix::selector::Selector::select (3 samples, 3.70%)</title><rect x="3.7037%" y="741" width="3.7037%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="3"/><text x="3.9537%" y="751.50">mio:..</text></g><g><title>_kevent (3 samples, 3.70%)</title><rect x="3.7037%" y="725" width="3.7037%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="3"/><text x="3.9537%" y="735.50">_kev..</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (3 samples, 3.70%)</title><rect x="3.7037%" y="709" width="3.7037%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="3"/><text x="3.9537%" y="719.50">&lt;ppr..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (3 samples, 3.70%)</title><rect x="3.7037%" y="693" width="3.7037%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="3"/><text x="3.9537%" y="703.50">back..</text></g><g><title>backtrace::backtrace::libunwind::trace (3 samples, 3.70%)</title><rect x="3.7037%" y="677" width="3.7037%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="3"/><text x="3.9537%" y="687.50">back..</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.23%)</title><rect x="7.4074%" y="485" width="1.2346%" height="15" fill="rgb(221,5,38)" fg:x="6" fg:w="1"/><text x="7.6574%" y="495.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.23%)</title><rect x="7.4074%" y="469" width="1.2346%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="1"/><text x="7.6574%" y="479.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.23%)</title><rect x="7.4074%" y="453" width="1.2346%" height="15" fill="rgb(241,131,45)" fg:x="6" fg:w="1"/><text x="7.6574%" y="463.50"></text></g><g><title>app::engine::Engine::read_all_orderbooks::{{closure}}::{{closure}} (6 samples, 7.41%)</title><rect x="7.4074%" y="661" width="7.4074%" height="15" fill="rgb(249,31,29)" fg:x="6" fg:w="6"/><text x="7.6574%" y="671.50">app::engin..</text></g><g><title>app::engine::Engine::read_orderbooks::{{closure}} (6 samples, 7.41%)</title><rect x="7.4074%" y="645" width="7.4074%" height="15" fill="rgb(225,111,53)" fg:x="6" fg:w="6"/><text x="7.6574%" y="655.50">app::engin..</text></g><g><title>&lt;futures_util::stream::stream::next::Next&lt;St&gt; as core::future::future::Future&gt;::poll (6 samples, 7.41%)</title><rect x="7.4074%" y="629" width="7.4074%" height="15" fill="rgb(238,160,17)" fg:x="6" fg:w="6"/><text x="7.6574%" y="639.50">&lt;futures_u..</text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (6 samples, 7.41%)</title><rect x="7.4074%" y="613" width="7.4074%" height="15" fill="rgb(214,148,48)" fg:x="6" fg:w="6"/><text x="7.6574%" y="623.50">futures_ut..</text></g><g><title>&lt;futures_util::stream::stream::split::SplitStream&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (6 samples, 7.41%)</title><rect x="7.4074%" y="597" width="7.4074%" height="15" fill="rgb(232,36,49)" fg:x="6" fg:w="6"/><text x="7.6574%" y="607.50">&lt;futures_u..</text></g><g><title>&lt;tokio_tungstenite::WebSocketStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (6 samples, 7.41%)</title><rect x="7.4074%" y="581" width="7.4074%" height="15" fill="rgb(209,103,24)" fg:x="6" fg:w="6"/><text x="7.6574%" y="591.50">&lt;tokio_tun..</text></g><g><title>tokio_tungstenite::WebSocketStream&lt;S&gt;::with_context (6 samples, 7.41%)</title><rect x="7.4074%" y="565" width="7.4074%" height="15" fill="rgb(229,88,8)" fg:x="6" fg:w="6"/><text x="7.6574%" y="575.50">tokio_tung..</text></g><g><title>&lt;tokio_tungstenite::WebSocketStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next::{{closure}} (6 samples, 7.41%)</title><rect x="7.4074%" y="549" width="7.4074%" height="15" fill="rgb(213,181,19)" fg:x="6" fg:w="6"/><text x="7.6574%" y="559.50">&lt;tokio_tun..</text></g><g><title>tungstenite::protocol::WebSocket&lt;Stream&gt;::read (6 samples, 7.41%)</title><rect x="7.4074%" y="533" width="7.4074%" height="15" fill="rgb(254,191,54)" fg:x="6" fg:w="6"/><text x="7.6574%" y="543.50">tungstenit..</text></g><g><title>tungstenite::protocol::WebSocketContext::read (6 samples, 7.41%)</title><rect x="7.4074%" y="517" width="7.4074%" height="15" fill="rgb(241,83,37)" fg:x="6" fg:w="6"/><text x="7.6574%" y="527.50">tungstenit..</text></g><g><title>tungstenite::protocol::WebSocketContext::read_message_frame (6 samples, 7.41%)</title><rect x="7.4074%" y="501" width="7.4074%" height="15" fill="rgb(233,36,39)" fg:x="6" fg:w="6"/><text x="7.6574%" y="511.50">tungstenit..</text></g><g><title>tungstenite::protocol::frame::FrameCodec::read_frame (5 samples, 6.17%)</title><rect x="8.6420%" y="485" width="6.1728%" height="15" fill="rgb(226,3,54)" fg:x="7" fg:w="5"/><text x="8.8920%" y="495.50">tungsten..</text></g><g><title>tungstenite::protocol::frame::FrameCodec::read_in (5 samples, 6.17%)</title><rect x="8.6420%" y="469" width="6.1728%" height="15" fill="rgb(245,192,40)" fg:x="7" fg:w="5"/><text x="8.8920%" y="479.50">tungsten..</text></g><g><title>&lt;tokio_tungstenite::compat::AllowStd&lt;S&gt; as std::io::Read&gt;::read (5 samples, 6.17%)</title><rect x="8.6420%" y="453" width="6.1728%" height="15" fill="rgb(238,167,29)" fg:x="7" fg:w="5"/><text x="8.8920%" y="463.50">&lt;tokio_t..</text></g><g><title>tokio_tungstenite::compat::AllowStd&lt;S&gt;::with_context (5 samples, 6.17%)</title><rect x="8.6420%" y="437" width="6.1728%" height="15" fill="rgb(232,182,51)" fg:x="7" fg:w="5"/><text x="8.8920%" y="447.50">tokio_tu..</text></g><g><title>&lt;tokio_tungstenite::compat::AllowStd&lt;S&gt; as std::io::Read&gt;::read::{{closure}} (5 samples, 6.17%)</title><rect x="8.6420%" y="421" width="6.1728%" height="15" fill="rgb(231,60,39)" fg:x="7" fg:w="5"/><text x="8.8920%" y="431.50">&lt;tokio_t..</text></g><g><title>&lt;tokio_tungstenite::stream::MaybeTlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (5 samples, 6.17%)</title><rect x="8.6420%" y="405" width="6.1728%" height="15" fill="rgb(208,69,12)" fg:x="7" fg:w="5"/><text x="8.8920%" y="415.50">&lt;tokio_t..</text></g><g><title>&lt;tokio_rustls::client::TlsStream&lt;IO&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (5 samples, 6.17%)</title><rect x="8.6420%" y="389" width="6.1728%" height="15" fill="rgb(235,93,37)" fg:x="7" fg:w="5"/><text x="8.8920%" y="399.50">&lt;tokio_r..</text></g><g><title>&lt;tokio_rustls::client::TlsStream&lt;IO&gt; as tokio::io::async_buf_read::AsyncBufRead&gt;::poll_fill_buf (5 samples, 6.17%)</title><rect x="8.6420%" y="373" width="6.1728%" height="15" fill="rgb(213,116,39)" fg:x="7" fg:w="5"/><text x="8.8920%" y="383.50">&lt;tokio_r..</text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::poll_fill_buf (5 samples, 6.17%)</title><rect x="8.6420%" y="357" width="6.1728%" height="15" fill="rgb(222,207,29)" fg:x="7" fg:w="5"/><text x="8.8920%" y="367.50">tokio_ru..</text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (5 samples, 6.17%)</title><rect x="8.6420%" y="341" width="6.1728%" height="15" fill="rgb(206,96,30)" fg:x="7" fg:w="5"/><text x="8.8920%" y="351.50">tokio_ru..</text></g><g><title>rustls::conn::ConnectionCommon&lt;Data&gt;::read_tls (5 samples, 6.17%)</title><rect x="8.6420%" y="325" width="6.1728%" height="15" fill="rgb(218,138,4)" fg:x="7" fg:w="5"/><text x="8.8920%" y="335.50">rustls::..</text></g><g><title>rustls::msgs::deframer::buffers::DeframerVecBuffer::read (5 samples, 6.17%)</title><rect x="8.6420%" y="309" width="6.1728%" height="15" fill="rgb(250,191,14)" fg:x="7" fg:w="5"/><text x="8.8920%" y="319.50">rustls::..</text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (5 samples, 6.17%)</title><rect x="8.6420%" y="293" width="6.1728%" height="15" fill="rgb(239,60,40)" fg:x="7" fg:w="5"/><text x="8.8920%" y="303.50">&lt;tokio_r..</text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (5 samples, 6.17%)</title><rect x="8.6420%" y="277" width="6.1728%" height="15" fill="rgb(206,27,48)" fg:x="7" fg:w="5"/><text x="8.8920%" y="287.50">&lt;&amp;mut T ..</text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (5 samples, 6.17%)</title><rect x="8.6420%" y="261" width="6.1728%" height="15" fill="rgb(225,35,8)" fg:x="7" fg:w="5"/><text x="8.8920%" y="271.50">&lt;tokio::..</text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (5 samples, 6.17%)</title><rect x="8.6420%" y="245" width="6.1728%" height="15" fill="rgb(250,213,24)" fg:x="7" fg:w="5"/><text x="8.8920%" y="255.50">tokio::n..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (5 samples, 6.17%)</title><rect x="8.6420%" y="229" width="6.1728%" height="15" fill="rgb(247,123,22)" fg:x="7" fg:w="5"/><text x="8.8920%" y="239.50">tokio::i..</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (5 samples, 6.17%)</title><rect x="8.6420%" y="213" width="6.1728%" height="15" fill="rgb(231,138,38)" fg:x="7" fg:w="5"/><text x="8.8920%" y="223.50">&lt;&amp;mio::n..</text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (5 samples, 6.17%)</title><rect x="8.6420%" y="197" width="6.1728%" height="15" fill="rgb(231,145,46)" fg:x="7" fg:w="5"/><text x="8.8920%" y="207.50">mio::io_..</text></g><g><title>mio::sys::unix::selector::stateless_io_source::IoSourceState::do_io (5 samples, 6.17%)</title><rect x="8.6420%" y="181" width="6.1728%" height="15" fill="rgb(251,118,11)" fg:x="7" fg:w="5"/><text x="8.8920%" y="191.50">mio::sys..</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::{{closure}} (5 samples, 6.17%)</title><rect x="8.6420%" y="165" width="6.1728%" height="15" fill="rgb(217,147,25)" fg:x="7" fg:w="5"/><text x="8.8920%" y="175.50">&lt;&amp;mio::n..</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (5 samples, 6.17%)</title><rect x="8.6420%" y="149" width="6.1728%" height="15" fill="rgb(247,81,37)" fg:x="7" fg:w="5"/><text x="8.8920%" y="159.50">&lt;&amp;std::n..</text></g><g><title>std::sys::net::connection::socket::TcpStream::read (5 samples, 6.17%)</title><rect x="8.6420%" y="133" width="6.1728%" height="15" fill="rgb(209,12,38)" fg:x="7" fg:w="5"/><text x="8.8920%" y="143.50">std::sys..</text></g><g><title>std::sys::net::connection::socket::unix::Socket::read (5 samples, 6.17%)</title><rect x="8.6420%" y="117" width="6.1728%" height="15" fill="rgb(227,1,9)" fg:x="7" fg:w="5"/><text x="8.8920%" y="127.50">std::sys..</text></g><g><title>std::sys::net::connection::socket::unix::Socket::recv_with_flags (5 samples, 6.17%)</title><rect x="8.6420%" y="101" width="6.1728%" height="15" fill="rgb(248,47,43)" fg:x="7" fg:w="5"/><text x="8.8920%" y="111.50">std::sys..</text></g><g><title>_recvfrom (5 samples, 6.17%)</title><rect x="8.6420%" y="85" width="6.1728%" height="15" fill="rgb(221,10,30)" fg:x="7" fg:w="5"/><text x="8.8920%" y="95.50">_recvfrom</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (5 samples, 6.17%)</title><rect x="8.6420%" y="69" width="6.1728%" height="15" fill="rgb(210,229,1)" fg:x="7" fg:w="5"/><text x="8.8920%" y="79.50">&lt;pprof::..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (5 samples, 6.17%)</title><rect x="8.6420%" y="53" width="6.1728%" height="15" fill="rgb(222,148,37)" fg:x="7" fg:w="5"/><text x="8.8920%" y="63.50">backtrac..</text></g><g><title>backtrace::backtrace::libunwind::trace (5 samples, 6.17%)</title><rect x="8.6420%" y="37" width="6.1728%" height="15" fill="rgb(234,67,33)" fg:x="7" fg:w="5"/><text x="8.8920%" y="47.50">backtrac..</text></g><g><title>123145468641280 (18 samples, 22.22%)</title><rect x="0.0000%" y="1669" width="22.2222%" height="15" fill="rgb(247,98,35)" fg:x="0" fg:w="18"/><text x="0.2500%" y="1679.50">123145468641280</text></g><g><title>__pthread_start (15 samples, 18.52%)</title><rect x="3.7037%" y="1653" width="18.5185%" height="15" fill="rgb(247,138,52)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1663.50">__pthread_start</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (15 samples, 18.52%)</title><rect x="3.7037%" y="1637" width="18.5185%" height="15" fill="rgb(213,79,30)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1647.50">std::sys::pal::unix::thread::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (15 samples, 18.52%)</title><rect x="3.7037%" y="1621" width="18.5185%" height="15" fill="rgb(246,177,23)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1631.50">&lt;alloc::boxed::Box&lt;F,A&gt; as co..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (15 samples, 18.52%)</title><rect x="3.7037%" y="1605" width="18.5185%" height="15" fill="rgb(230,62,27)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1615.50">&lt;alloc::boxed::Box&lt;F,A&gt; as co..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (15 samples, 18.52%)</title><rect x="3.7037%" y="1589" width="18.5185%" height="15" fill="rgb(216,154,8)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1599.50">core::ops::function::FnOnce::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (15 samples, 18.52%)</title><rect x="3.7037%" y="1573" width="18.5185%" height="15" fill="rgb(244,35,45)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1583.50">std::thread::Builder::spawn_u..</text></g><g><title>std::panic::catch_unwind (15 samples, 18.52%)</title><rect x="3.7037%" y="1557" width="18.5185%" height="15" fill="rgb(251,115,12)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1567.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (15 samples, 18.52%)</title><rect x="3.7037%" y="1541" width="18.5185%" height="15" fill="rgb(240,54,50)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1551.50">std::panicking::try</text></g><g><title>___rust_try (15 samples, 18.52%)</title><rect x="3.7037%" y="1525" width="18.5185%" height="15" fill="rgb(233,84,52)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1535.50">___rust_try</text></g><g><title>std::panicking::try::do_call (15 samples, 18.52%)</title><rect x="3.7037%" y="1509" width="18.5185%" height="15" fill="rgb(207,117,47)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1519.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (15 samples, 18.52%)</title><rect x="3.7037%" y="1493" width="18.5185%" height="15" fill="rgb(249,43,39)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1503.50">&lt;core::panic::unwind_safe::As..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (15 samples, 18.52%)</title><rect x="3.7037%" y="1477" width="18.5185%" height="15" fill="rgb(209,38,44)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1487.50">std::thread::Builder::spawn_u..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (15 samples, 18.52%)</title><rect x="3.7037%" y="1461" width="18.5185%" height="15" fill="rgb(236,212,23)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1471.50">std::sys::backtrace::__rust_b..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (15 samples, 18.52%)</title><rect x="3.7037%" y="1445" width="18.5185%" height="15" fill="rgb(242,79,21)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1455.50">tokio::runtime::blocking::poo..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (15 samples, 18.52%)</title><rect x="3.7037%" y="1429" width="18.5185%" height="15" fill="rgb(211,96,35)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1439.50">tokio::runtime::blocking::poo..</text></g><g><title>tokio::runtime::blocking::pool::Task::run (15 samples, 18.52%)</title><rect x="3.7037%" y="1413" width="18.5185%" height="15" fill="rgb(253,215,40)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1423.50">tokio::runtime::blocking::poo..</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (15 samples, 18.52%)</title><rect x="3.7037%" y="1397" width="18.5185%" height="15" fill="rgb(211,81,21)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1407.50">tokio::runtime::task::Unowned..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (15 samples, 18.52%)</title><rect x="3.7037%" y="1381" width="18.5185%" height="15" fill="rgb(208,190,38)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1391.50">tokio::runtime::task::raw::Ra..</text></g><g><title>tokio::runtime::task::raw::poll (15 samples, 18.52%)</title><rect x="3.7037%" y="1365" width="18.5185%" height="15" fill="rgb(235,213,38)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1375.50">tokio::runtime::task::raw::po..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (15 samples, 18.52%)</title><rect x="3.7037%" y="1349" width="18.5185%" height="15" fill="rgb(237,122,38)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1359.50">tokio::runtime::task::harness..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (15 samples, 18.52%)</title><rect x="3.7037%" y="1333" width="18.5185%" height="15" fill="rgb(244,218,35)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1343.50">tokio::runtime::task::harness..</text></g><g><title>tokio::runtime::task::harness::poll_future (15 samples, 18.52%)</title><rect x="3.7037%" y="1317" width="18.5185%" height="15" fill="rgb(240,68,47)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1327.50">tokio::runtime::task::harness..</text></g><g><title>std::panic::catch_unwind (15 samples, 18.52%)</title><rect x="3.7037%" y="1301" width="18.5185%" height="15" fill="rgb(210,16,53)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1311.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (15 samples, 18.52%)</title><rect x="3.7037%" y="1285" width="18.5185%" height="15" fill="rgb(235,124,12)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1295.50">std::panicking::try</text></g><g><title>___rust_try (15 samples, 18.52%)</title><rect x="3.7037%" y="1269" width="18.5185%" height="15" fill="rgb(224,169,11)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1279.50">___rust_try</text></g><g><title>std::panicking::try::do_call (15 samples, 18.52%)</title><rect x="3.7037%" y="1253" width="18.5185%" height="15" fill="rgb(250,166,2)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1263.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (15 samples, 18.52%)</title><rect x="3.7037%" y="1237" width="18.5185%" height="15" fill="rgb(242,216,29)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1247.50">&lt;core::panic::unwind_safe::As..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (15 samples, 18.52%)</title><rect x="3.7037%" y="1221" width="18.5185%" height="15" fill="rgb(230,116,27)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1231.50">tokio::runtime::task::harness..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (15 samples, 18.52%)</title><rect x="3.7037%" y="1205" width="18.5185%" height="15" fill="rgb(228,99,48)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1215.50">tokio::runtime::task::core::C..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (15 samples, 18.52%)</title><rect x="3.7037%" y="1189" width="18.5185%" height="15" fill="rgb(253,11,6)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1199.50">tokio::loom::std::unsafe_cell..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (15 samples, 18.52%)</title><rect x="3.7037%" y="1173" width="18.5185%" height="15" fill="rgb(247,143,39)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1183.50">tokio::runtime::task::core::C..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 18.52%)</title><rect x="3.7037%" y="1157" width="18.5185%" height="15" fill="rgb(236,97,10)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1167.50">&lt;tokio::runtime::blocking::ta..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}} (15 samples, 18.52%)</title><rect x="3.7037%" y="1141" width="18.5185%" height="15" fill="rgb(233,208,19)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1151.50">tokio::runtime::scheduler::mu..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (15 samples, 18.52%)</title><rect x="3.7037%" y="1125" width="18.5185%" height="15" fill="rgb(216,164,2)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1135.50">tokio::runtime::scheduler::mu..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (15 samples, 18.52%)</title><rect x="3.7037%" y="1109" width="18.5185%" height="15" fill="rgb(220,129,5)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1119.50">tokio::runtime::context::runt..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}} (15 samples, 18.52%)</title><rect x="3.7037%" y="1093" width="18.5185%" height="15" fill="rgb(242,17,10)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1103.50">tokio::runtime::scheduler::mu..</text></g><g><title>tokio::runtime::context::set_scheduler (15 samples, 18.52%)</title><rect x="3.7037%" y="1077" width="18.5185%" height="15" fill="rgb(242,107,0)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1087.50">tokio::runtime::context::set_..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (15 samples, 18.52%)</title><rect x="3.7037%" y="1061" width="18.5185%" height="15" fill="rgb(251,28,31)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1071.50">std::thread::local::LocalKey&lt;..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (15 samples, 18.52%)</title><rect x="3.7037%" y="1045" width="18.5185%" height="15" fill="rgb(233,223,10)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1055.50">std::thread::local::LocalKey&lt;..</text></g><g><title>tokio::runtime::context::set_scheduler::{{closure}} (15 samples, 18.52%)</title><rect x="3.7037%" y="1029" width="18.5185%" height="15" fill="rgb(215,21,27)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1039.50">tokio::runtime::context::set_..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (15 samples, 18.52%)</title><rect x="3.7037%" y="1013" width="18.5185%" height="15" fill="rgb(232,23,21)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1023.50">tokio::runtime::context::scop..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}}::{{closure}} (15 samples, 18.52%)</title><rect x="3.7037%" y="997" width="18.5185%" height="15" fill="rgb(244,5,23)" fg:x="3" fg:w="15"/><text x="3.9537%" y="1007.50">tokio::runtime::scheduler::mu..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (15 samples, 18.52%)</title><rect x="3.7037%" y="981" width="18.5185%" height="15" fill="rgb(226,81,46)" fg:x="3" fg:w="15"/><text x="3.9537%" y="991.50">tokio::runtime::scheduler::mu..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (12 samples, 14.81%)</title><rect x="7.4074%" y="965" width="14.8148%" height="15" fill="rgb(247,70,30)" fg:x="6" fg:w="12"/><text x="7.6574%" y="975.50">tokio::runtime::schedul..</text></g><g><title>tokio::task::coop::budget (12 samples, 14.81%)</title><rect x="7.4074%" y="949" width="14.8148%" height="15" fill="rgb(212,68,19)" fg:x="6" fg:w="12"/><text x="7.6574%" y="959.50">tokio::task::coop::budg..</text></g><g><title>tokio::task::coop::with_budget (12 samples, 14.81%)</title><rect x="7.4074%" y="933" width="14.8148%" height="15" fill="rgb(240,187,13)" fg:x="6" fg:w="12"/><text x="7.6574%" y="943.50">tokio::task::coop::with..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}} (12 samples, 14.81%)</title><rect x="7.4074%" y="917" width="14.8148%" height="15" fill="rgb(223,113,26)" fg:x="6" fg:w="12"/><text x="7.6574%" y="927.50">tokio::runtime::schedul..</text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (12 samples, 14.81%)</title><rect x="7.4074%" y="901" width="14.8148%" height="15" fill="rgb(206,192,2)" fg:x="6" fg:w="12"/><text x="7.6574%" y="911.50">tokio::runtime::task::L..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (12 samples, 14.81%)</title><rect x="7.4074%" y="885" width="14.8148%" height="15" fill="rgb(241,108,4)" fg:x="6" fg:w="12"/><text x="7.6574%" y="895.50">tokio::runtime::task::r..</text></g><g><title>tokio::runtime::task::raw::poll (12 samples, 14.81%)</title><rect x="7.4074%" y="869" width="14.8148%" height="15" fill="rgb(247,173,49)" fg:x="6" fg:w="12"/><text x="7.6574%" y="879.50">tokio::runtime::task::r..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (12 samples, 14.81%)</title><rect x="7.4074%" y="853" width="14.8148%" height="15" fill="rgb(224,114,35)" fg:x="6" fg:w="12"/><text x="7.6574%" y="863.50">tokio::runtime::task::h..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (12 samples, 14.81%)</title><rect x="7.4074%" y="837" width="14.8148%" height="15" fill="rgb(245,159,27)" fg:x="6" fg:w="12"/><text x="7.6574%" y="847.50">tokio::runtime::task::h..</text></g><g><title>tokio::runtime::task::harness::poll_future (12 samples, 14.81%)</title><rect x="7.4074%" y="821" width="14.8148%" height="15" fill="rgb(245,172,44)" fg:x="6" fg:w="12"/><text x="7.6574%" y="831.50">tokio::runtime::task::h..</text></g><g><title>std::panic::catch_unwind (12 samples, 14.81%)</title><rect x="7.4074%" y="805" width="14.8148%" height="15" fill="rgb(236,23,11)" fg:x="6" fg:w="12"/><text x="7.6574%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (12 samples, 14.81%)</title><rect x="7.4074%" y="789" width="14.8148%" height="15" fill="rgb(205,117,38)" fg:x="6" fg:w="12"/><text x="7.6574%" y="799.50">std::panicking::try</text></g><g><title>___rust_try (12 samples, 14.81%)</title><rect x="7.4074%" y="773" width="14.8148%" height="15" fill="rgb(237,72,25)" fg:x="6" fg:w="12"/><text x="7.6574%" y="783.50">___rust_try</text></g><g><title>std::panicking::try::do_call (12 samples, 14.81%)</title><rect x="7.4074%" y="757" width="14.8148%" height="15" fill="rgb(244,70,9)" fg:x="6" fg:w="12"/><text x="7.6574%" y="767.50">std::panicking::try::do..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (12 samples, 14.81%)</title><rect x="7.4074%" y="741" width="14.8148%" height="15" fill="rgb(217,125,39)" fg:x="6" fg:w="12"/><text x="7.6574%" y="751.50">&lt;core::panic::unwind_sa..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (12 samples, 14.81%)</title><rect x="7.4074%" y="725" width="14.8148%" height="15" fill="rgb(235,36,10)" fg:x="6" fg:w="12"/><text x="7.6574%" y="735.50">tokio::runtime::task::h..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (12 samples, 14.81%)</title><rect x="7.4074%" y="709" width="14.8148%" height="15" fill="rgb(251,123,47)" fg:x="6" fg:w="12"/><text x="7.6574%" y="719.50">tokio::runtime::task::c..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (12 samples, 14.81%)</title><rect x="7.4074%" y="693" width="14.8148%" height="15" fill="rgb(221,13,13)" fg:x="6" fg:w="12"/><text x="7.6574%" y="703.50">tokio::loom::std::unsaf..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (12 samples, 14.81%)</title><rect x="7.4074%" y="677" width="14.8148%" height="15" fill="rgb(238,131,9)" fg:x="6" fg:w="12"/><text x="7.6574%" y="687.50">tokio::runtime::task::c..</text></g><g><title>app::main::{{closure}}::{{closure}} (6 samples, 7.41%)</title><rect x="14.8148%" y="661" width="7.4074%" height="15" fill="rgb(211,50,8)" fg:x="12" fg:w="6"/><text x="15.0648%" y="671.50">app::main:..</text></g><g><title>app::engine::Engine::read_all_orderbooks::{{closure}} (6 samples, 7.41%)</title><rect x="14.8148%" y="645" width="7.4074%" height="15" fill="rgb(245,182,24)" fg:x="12" fg:w="6"/><text x="15.0648%" y="655.50">app::engin..</text></g><g><title>std::io::stdio::_print (6 samples, 7.41%)</title><rect x="14.8148%" y="629" width="7.4074%" height="15" fill="rgb(242,14,37)" fg:x="12" fg:w="6"/><text x="15.0648%" y="639.50">std::io::s..</text></g><g><title>std::io::stdio::print_to (6 samples, 7.41%)</title><rect x="14.8148%" y="613" width="7.4074%" height="15" fill="rgb(246,228,12)" fg:x="12" fg:w="6"/><text x="15.0648%" y="623.50">std::io::s..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (6 samples, 7.41%)</title><rect x="14.8148%" y="597" width="7.4074%" height="15" fill="rgb(213,55,15)" fg:x="12" fg:w="6"/><text x="15.0648%" y="607.50">&lt;std::io::..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (6 samples, 7.41%)</title><rect x="14.8148%" y="581" width="7.4074%" height="15" fill="rgb(209,9,3)" fg:x="12" fg:w="6"/><text x="15.0648%" y="591.50">&lt;&amp;std::io:..</text></g><g><title>std::io::Write::write_fmt (6 samples, 7.41%)</title><rect x="14.8148%" y="565" width="7.4074%" height="15" fill="rgb(230,59,30)" fg:x="12" fg:w="6"/><text x="15.0648%" y="575.50">std::io::W..</text></g><g><title>std::io::default_write_fmt (6 samples, 7.41%)</title><rect x="14.8148%" y="549" width="7.4074%" height="15" fill="rgb(209,121,21)" fg:x="12" fg:w="6"/><text x="15.0648%" y="559.50">std::io::d..</text></g><g><title>core::fmt::write (6 samples, 7.41%)</title><rect x="14.8148%" y="533" width="7.4074%" height="15" fill="rgb(220,109,13)" fg:x="12" fg:w="6"/><text x="15.0648%" y="543.50">core::fmt:..</text></g><g><title>&lt;std::io::default_write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (6 samples, 7.41%)</title><rect x="14.8148%" y="517" width="7.4074%" height="15" fill="rgb(232,18,1)" fg:x="12" fg:w="6"/><text x="15.0648%" y="527.50">&lt;std::io::..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (6 samples, 7.41%)</title><rect x="14.8148%" y="501" width="7.4074%" height="15" fill="rgb(215,41,42)" fg:x="12" fg:w="6"/><text x="15.0648%" y="511.50">&lt;std::io::..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (6 samples, 7.41%)</title><rect x="14.8148%" y="485" width="7.4074%" height="15" fill="rgb(224,123,36)" fg:x="12" fg:w="6"/><text x="15.0648%" y="495.50">&lt;std::io::..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (6 samples, 7.41%)</title><rect x="14.8148%" y="469" width="7.4074%" height="15" fill="rgb(240,125,3)" fg:x="12" fg:w="6"/><text x="15.0648%" y="479.50">&lt;std::io::..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (6 samples, 7.41%)</title><rect x="14.8148%" y="453" width="7.4074%" height="15" fill="rgb(205,98,50)" fg:x="12" fg:w="6"/><text x="15.0648%" y="463.50">std::io::b..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (6 samples, 7.41%)</title><rect x="14.8148%" y="437" width="7.4074%" height="15" fill="rgb(205,185,37)" fg:x="12" fg:w="6"/><text x="15.0648%" y="447.50">&lt;std::io::..</text></g><g><title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (6 samples, 7.41%)</title><rect x="14.8148%" y="421" width="7.4074%" height="15" fill="rgb(238,207,15)" fg:x="12" fg:w="6"/><text x="15.0648%" y="431.50">&lt;std::sys:..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (6 samples, 7.41%)</title><rect x="14.8148%" y="405" width="7.4074%" height="15" fill="rgb(213,199,42)" fg:x="12" fg:w="6"/><text x="15.0648%" y="415.50">std::sys::..</text></g><g><title>_write (6 samples, 7.41%)</title><rect x="14.8148%" y="389" width="7.4074%" height="15" fill="rgb(235,201,11)" fg:x="12" fg:w="6"/><text x="15.0648%" y="399.50">_write</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (6 samples, 7.41%)</title><rect x="14.8148%" y="373" width="7.4074%" height="15" fill="rgb(207,46,11)" fg:x="12" fg:w="6"/><text x="15.0648%" y="383.50">&lt;pprof::ba..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (6 samples, 7.41%)</title><rect x="14.8148%" y="357" width="7.4074%" height="15" fill="rgb(241,35,35)" fg:x="12" fg:w="6"/><text x="15.0648%" y="367.50">backtrace:..</text></g><g><title>backtrace::backtrace::libunwind::trace (6 samples, 7.41%)</title><rect x="14.8148%" y="341" width="7.4074%" height="15" fill="rgb(243,32,47)" fg:x="12" fg:w="6"/><text x="15.0648%" y="351.50">backtrace:..</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.23%)</title><rect x="22.2222%" y="1653" width="1.2346%" height="15" fill="rgb(247,202,23)" fg:x="18" fg:w="1"/><text x="22.4722%" y="1663.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.23%)</title><rect x="22.2222%" y="1637" width="1.2346%" height="15" fill="rgb(219,102,11)" fg:x="18" fg:w="1"/><text x="22.4722%" y="1647.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.23%)</title><rect x="22.2222%" y="1621" width="1.2346%" height="15" fill="rgb(243,110,44)" fg:x="18" fg:w="1"/><text x="22.4722%" y="1631.50"></text></g><g><title>tokio::runtime::time::Driver::park_thread_timeout (1 samples, 1.23%)</title><rect x="23.4568%" y="821" width="1.2346%" height="15" fill="rgb(222,74,54)" fg:x="19" fg:w="1"/><text x="23.7068%" y="831.50"></text></g><g><title>tokio::runtime::driver::IoStack::park_timeout (1 samples, 1.23%)</title><rect x="23.4568%" y="805" width="1.2346%" height="15" fill="rgb(216,99,12)" fg:x="19" fg:w="1"/><text x="23.7068%" y="815.50"></text></g><g><title>tokio::runtime::io::driver::Driver::park_timeout (1 samples, 1.23%)</title><rect x="23.4568%" y="789" width="1.2346%" height="15" fill="rgb(226,22,26)" fg:x="19" fg:w="1"/><text x="23.7068%" y="799.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (1 samples, 1.23%)</title><rect x="23.4568%" y="773" width="1.2346%" height="15" fill="rgb(217,163,10)" fg:x="19" fg:w="1"/><text x="23.7068%" y="783.50"></text></g><g><title>mio::poll::Poll::poll (1 samples, 1.23%)</title><rect x="23.4568%" y="757" width="1.2346%" height="15" fill="rgb(213,25,53)" fg:x="19" fg:w="1"/><text x="23.7068%" y="767.50"></text></g><g><title>mio::sys::unix::selector::Selector::select (1 samples, 1.23%)</title><rect x="23.4568%" y="741" width="1.2346%" height="15" fill="rgb(252,105,26)" fg:x="19" fg:w="1"/><text x="23.7068%" y="751.50"></text></g><g><title>_kevent (1 samples, 1.23%)</title><rect x="23.4568%" y="725" width="1.2346%" height="15" fill="rgb(220,39,43)" fg:x="19" fg:w="1"/><text x="23.7068%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.23%)</title><rect x="23.4568%" y="709" width="1.2346%" height="15" fill="rgb(229,68,48)" fg:x="19" fg:w="1"/><text x="23.7068%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.23%)</title><rect x="23.4568%" y="693" width="1.2346%" height="15" fill="rgb(252,8,32)" fg:x="19" fg:w="1"/><text x="23.7068%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.23%)</title><rect x="23.4568%" y="677" width="1.2346%" height="15" fill="rgb(223,20,43)" fg:x="19" fg:w="1"/><text x="23.7068%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (2 samples, 2.47%)</title><rect x="23.4568%" y="965" width="2.4691%" height="15" fill="rgb(229,81,49)" fg:x="19" fg:w="2"/><text x="23.7068%" y="975.50">to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (2 samples, 2.47%)</title><rect x="23.4568%" y="949" width="2.4691%" height="15" fill="rgb(236,28,36)" fg:x="19" fg:w="2"/><text x="23.7068%" y="959.50">to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (2 samples, 2.47%)</title><rect x="23.4568%" y="933" width="2.4691%" height="15" fill="rgb(249,185,26)" fg:x="19" fg:w="2"/><text x="23.7068%" y="943.50">to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (2 samples, 2.47%)</title><rect x="23.4568%" y="917" width="2.4691%" height="15" fill="rgb(249,174,33)" fg:x="19" fg:w="2"/><text x="23.7068%" y="927.50">to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (2 samples, 2.47%)</title><rect x="23.4568%" y="901" width="2.4691%" height="15" fill="rgb(233,201,37)" fg:x="19" fg:w="2"/><text x="23.7068%" y="911.50">to..</text></g><g><title>tokio::runtime::driver::Driver::park (2 samples, 2.47%)</title><rect x="23.4568%" y="885" width="2.4691%" height="15" fill="rgb(221,78,26)" fg:x="19" fg:w="2"/><text x="23.7068%" y="895.50">to..</text></g><g><title>tokio::runtime::driver::TimeDriver::park (2 samples, 2.47%)</title><rect x="23.4568%" y="869" width="2.4691%" height="15" fill="rgb(250,127,30)" fg:x="19" fg:w="2"/><text x="23.7068%" y="879.50">to..</text></g><g><title>tokio::runtime::time::Driver::park (2 samples, 2.47%)</title><rect x="23.4568%" y="853" width="2.4691%" height="15" fill="rgb(230,49,44)" fg:x="19" fg:w="2"/><text x="23.7068%" y="863.50">to..</text></g><g><title>tokio::runtime::time::Driver::park_internal (2 samples, 2.47%)</title><rect x="23.4568%" y="837" width="2.4691%" height="15" fill="rgb(229,67,23)" fg:x="19" fg:w="2"/><text x="23.7068%" y="847.50">to..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration_time (1 samples, 1.23%)</title><rect x="24.6914%" y="821" width="1.2346%" height="15" fill="rgb(249,83,47)" fg:x="20" fg:w="1"/><text x="24.9414%" y="831.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 1.23%)</title><rect x="24.6914%" y="805" width="1.2346%" height="15" fill="rgb(215,43,3)" fg:x="20" fg:w="1"/><text x="24.9414%" y="815.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (1 samples, 1.23%)</title><rect x="24.6914%" y="789" width="1.2346%" height="15" fill="rgb(238,154,13)" fg:x="20" fg:w="1"/><text x="24.9414%" y="799.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (1 samples, 1.23%)</title><rect x="24.6914%" y="773" width="1.2346%" height="15" fill="rgb(219,56,2)" fg:x="20" fg:w="1"/><text x="24.9414%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.23%)</title><rect x="24.6914%" y="757" width="1.2346%" height="15" fill="rgb(233,0,4)" fg:x="20" fg:w="1"/><text x="24.9414%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.23%)</title><rect x="24.6914%" y="741" width="1.2346%" height="15" fill="rgb(235,30,7)" fg:x="20" fg:w="1"/><text x="24.9414%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.23%)</title><rect x="24.6914%" y="725" width="1.2346%" height="15" fill="rgb(250,79,13)" fg:x="20" fg:w="1"/><text x="24.9414%" y="735.50"></text></g><g><title>&lt;futures_util::stream::stream::next::Next&lt;St&gt; as core::future::future::Future&gt;::poll (2 samples, 2.47%)</title><rect x="25.9259%" y="629" width="2.4691%" height="15" fill="rgb(211,146,34)" fg:x="21" fg:w="2"/><text x="26.1759%" y="639.50">&lt;f..</text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (2 samples, 2.47%)</title><rect x="25.9259%" y="613" width="2.4691%" height="15" fill="rgb(228,22,38)" fg:x="21" fg:w="2"/><text x="26.1759%" y="623.50">fu..</text></g><g><title>&lt;futures_util::stream::stream::split::SplitStream&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (2 samples, 2.47%)</title><rect x="25.9259%" y="597" width="2.4691%" height="15" fill="rgb(235,168,5)" fg:x="21" fg:w="2"/><text x="26.1759%" y="607.50">&lt;f..</text></g><g><title>&lt;tokio_tungstenite::WebSocketStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2 samples, 2.47%)</title><rect x="25.9259%" y="581" width="2.4691%" height="15" fill="rgb(221,155,16)" fg:x="21" fg:w="2"/><text x="26.1759%" y="591.50">&lt;t..</text></g><g><title>tokio_tungstenite::WebSocketStream&lt;S&gt;::with_context (2 samples, 2.47%)</title><rect x="25.9259%" y="565" width="2.4691%" height="15" fill="rgb(215,215,53)" fg:x="21" fg:w="2"/><text x="26.1759%" y="575.50">to..</text></g><g><title>&lt;tokio_tungstenite::WebSocketStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next::{{closure}} (2 samples, 2.47%)</title><rect x="25.9259%" y="549" width="2.4691%" height="15" fill="rgb(223,4,10)" fg:x="21" fg:w="2"/><text x="26.1759%" y="559.50">&lt;t..</text></g><g><title>tungstenite::protocol::WebSocket&lt;Stream&gt;::read (2 samples, 2.47%)</title><rect x="25.9259%" y="533" width="2.4691%" height="15" fill="rgb(234,103,6)" fg:x="21" fg:w="2"/><text x="26.1759%" y="543.50">tu..</text></g><g><title>tungstenite::protocol::WebSocketContext::read (2 samples, 2.47%)</title><rect x="25.9259%" y="517" width="2.4691%" height="15" fill="rgb(227,97,0)" fg:x="21" fg:w="2"/><text x="26.1759%" y="527.50">tu..</text></g><g><title>tungstenite::protocol::WebSocketContext::read_message_frame (2 samples, 2.47%)</title><rect x="25.9259%" y="501" width="2.4691%" height="15" fill="rgb(234,150,53)" fg:x="21" fg:w="2"/><text x="26.1759%" y="511.50">tu..</text></g><g><title>tungstenite::protocol::frame::FrameCodec::read_frame (2 samples, 2.47%)</title><rect x="25.9259%" y="485" width="2.4691%" height="15" fill="rgb(228,201,54)" fg:x="21" fg:w="2"/><text x="26.1759%" y="495.50">tu..</text></g><g><title>tungstenite::protocol::frame::FrameCodec::read_in (2 samples, 2.47%)</title><rect x="25.9259%" y="469" width="2.4691%" height="15" fill="rgb(222,22,37)" fg:x="21" fg:w="2"/><text x="26.1759%" y="479.50">tu..</text></g><g><title>&lt;tokio_tungstenite::compat::AllowStd&lt;S&gt; as std::io::Read&gt;::read (2 samples, 2.47%)</title><rect x="25.9259%" y="453" width="2.4691%" height="15" fill="rgb(237,53,32)" fg:x="21" fg:w="2"/><text x="26.1759%" y="463.50">&lt;t..</text></g><g><title>tokio_tungstenite::compat::AllowStd&lt;S&gt;::with_context (2 samples, 2.47%)</title><rect x="25.9259%" y="437" width="2.4691%" height="15" fill="rgb(233,25,53)" fg:x="21" fg:w="2"/><text x="26.1759%" y="447.50">to..</text></g><g><title>&lt;tokio_tungstenite::compat::AllowStd&lt;S&gt; as std::io::Read&gt;::read::{{closure}} (2 samples, 2.47%)</title><rect x="25.9259%" y="421" width="2.4691%" height="15" fill="rgb(210,40,34)" fg:x="21" fg:w="2"/><text x="26.1759%" y="431.50">&lt;t..</text></g><g><title>&lt;tokio_tungstenite::stream::MaybeTlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 2.47%)</title><rect x="25.9259%" y="405" width="2.4691%" height="15" fill="rgb(241,220,44)" fg:x="21" fg:w="2"/><text x="26.1759%" y="415.50">&lt;t..</text></g><g><title>&lt;tokio_rustls::client::TlsStream&lt;IO&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 2.47%)</title><rect x="25.9259%" y="389" width="2.4691%" height="15" fill="rgb(235,28,35)" fg:x="21" fg:w="2"/><text x="26.1759%" y="399.50">&lt;t..</text></g><g><title>&lt;tokio_rustls::client::TlsStream&lt;IO&gt; as tokio::io::async_buf_read::AsyncBufRead&gt;::poll_fill_buf (2 samples, 2.47%)</title><rect x="25.9259%" y="373" width="2.4691%" height="15" fill="rgb(210,56,17)" fg:x="21" fg:w="2"/><text x="26.1759%" y="383.50">&lt;t..</text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::poll_fill_buf (2 samples, 2.47%)</title><rect x="25.9259%" y="357" width="2.4691%" height="15" fill="rgb(224,130,29)" fg:x="21" fg:w="2"/><text x="26.1759%" y="367.50">to..</text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (2 samples, 2.47%)</title><rect x="25.9259%" y="341" width="2.4691%" height="15" fill="rgb(235,212,8)" fg:x="21" fg:w="2"/><text x="26.1759%" y="351.50">to..</text></g><g><title>rustls::conn::ConnectionCommon&lt;Data&gt;::read_tls (2 samples, 2.47%)</title><rect x="25.9259%" y="325" width="2.4691%" height="15" fill="rgb(223,33,50)" fg:x="21" fg:w="2"/><text x="26.1759%" y="335.50">ru..</text></g><g><title>rustls::msgs::deframer::buffers::DeframerVecBuffer::read (2 samples, 2.47%)</title><rect x="25.9259%" y="309" width="2.4691%" height="15" fill="rgb(219,149,13)" fg:x="21" fg:w="2"/><text x="26.1759%" y="319.50">ru..</text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (2 samples, 2.47%)</title><rect x="25.9259%" y="293" width="2.4691%" height="15" fill="rgb(250,156,29)" fg:x="21" fg:w="2"/><text x="26.1759%" y="303.50">&lt;t..</text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 2.47%)</title><rect x="25.9259%" y="277" width="2.4691%" height="15" fill="rgb(216,193,19)" fg:x="21" fg:w="2"/><text x="26.1759%" y="287.50">&lt;&amp;..</text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 2.47%)</title><rect x="25.9259%" y="261" width="2.4691%" height="15" fill="rgb(216,135,14)" fg:x="21" fg:w="2"/><text x="26.1759%" y="271.50">&lt;t..</text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (2 samples, 2.47%)</title><rect x="25.9259%" y="245" width="2.4691%" height="15" fill="rgb(241,47,5)" fg:x="21" fg:w="2"/><text x="26.1759%" y="255.50">to..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (2 samples, 2.47%)</title><rect x="25.9259%" y="229" width="2.4691%" height="15" fill="rgb(233,42,35)" fg:x="21" fg:w="2"/><text x="26.1759%" y="239.50">to..</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (2 samples, 2.47%)</title><rect x="25.9259%" y="213" width="2.4691%" height="15" fill="rgb(231,13,6)" fg:x="21" fg:w="2"/><text x="26.1759%" y="223.50">&lt;&amp;..</text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (2 samples, 2.47%)</title><rect x="25.9259%" y="197" width="2.4691%" height="15" fill="rgb(207,181,40)" fg:x="21" fg:w="2"/><text x="26.1759%" y="207.50">mi..</text></g><g><title>mio::sys::unix::selector::stateless_io_source::IoSourceState::do_io (2 samples, 2.47%)</title><rect x="25.9259%" y="181" width="2.4691%" height="15" fill="rgb(254,173,49)" fg:x="21" fg:w="2"/><text x="26.1759%" y="191.50">mi..</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::{{closure}} (2 samples, 2.47%)</title><rect x="25.9259%" y="165" width="2.4691%" height="15" fill="rgb(221,1,38)" fg:x="21" fg:w="2"/><text x="26.1759%" y="175.50">&lt;&amp;..</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (2 samples, 2.47%)</title><rect x="25.9259%" y="149" width="2.4691%" height="15" fill="rgb(206,124,46)" fg:x="21" fg:w="2"/><text x="26.1759%" y="159.50">&lt;&amp;..</text></g><g><title>std::sys::net::connection::socket::TcpStream::read (2 samples, 2.47%)</title><rect x="25.9259%" y="133" width="2.4691%" height="15" fill="rgb(249,21,11)" fg:x="21" fg:w="2"/><text x="26.1759%" y="143.50">st..</text></g><g><title>std::sys::net::connection::socket::unix::Socket::read (2 samples, 2.47%)</title><rect x="25.9259%" y="117" width="2.4691%" height="15" fill="rgb(222,201,40)" fg:x="21" fg:w="2"/><text x="26.1759%" y="127.50">st..</text></g><g><title>std::sys::net::connection::socket::unix::Socket::recv_with_flags (2 samples, 2.47%)</title><rect x="25.9259%" y="101" width="2.4691%" height="15" fill="rgb(235,61,29)" fg:x="21" fg:w="2"/><text x="26.1759%" y="111.50">st..</text></g><g><title>_recvfrom (2 samples, 2.47%)</title><rect x="25.9259%" y="85" width="2.4691%" height="15" fill="rgb(219,207,3)" fg:x="21" fg:w="2"/><text x="26.1759%" y="95.50">_r..</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 2.47%)</title><rect x="25.9259%" y="69" width="2.4691%" height="15" fill="rgb(222,56,46)" fg:x="21" fg:w="2"/><text x="26.1759%" y="79.50">&lt;p..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 2.47%)</title><rect x="25.9259%" y="53" width="2.4691%" height="15" fill="rgb(239,76,54)" fg:x="21" fg:w="2"/><text x="26.1759%" y="63.50">ba..</text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 2.47%)</title><rect x="25.9259%" y="37" width="2.4691%" height="15" fill="rgb(231,124,27)" fg:x="21" fg:w="2"/><text x="26.1759%" y="47.50">ba..</text></g><g><title>serde_core::de::MapAccess::next_entry (1 samples, 1.23%)</title><rect x="28.3951%" y="549" width="1.2346%" height="15" fill="rgb(249,195,6)" fg:x="23" fg:w="1"/><text x="28.6451%" y="559.50"></text></g><g><title>serde_core::de::MapAccess::next_entry_seed (1 samples, 1.23%)</title><rect x="28.3951%" y="533" width="1.2346%" height="15" fill="rgb(237,174,47)" fg:x="23" fg:w="1"/><text x="28.6451%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde_core::de::MapAccess&gt;::next_value_seed (1 samples, 1.23%)</title><rect x="28.3951%" y="517" width="1.2346%" height="15" fill="rgb(206,201,31)" fg:x="23" fg:w="1"/><text x="28.6451%" y="527.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde_core::de::DeserializeSeed&gt;::deserialize (1 samples, 1.23%)</title><rect x="28.3951%" y="501" width="1.2346%" height="15" fill="rgb(231,57,52)" fg:x="23" fg:w="1"/><text x="28.6451%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_core::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 1.23%)</title><rect x="28.3951%" y="485" width="1.2346%" height="15" fill="rgb(248,177,22)" fg:x="23" fg:w="1"/><text x="28.6451%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde_core::de::Deserializer&gt;::deserialize_any (1 samples, 1.23%)</title><rect x="28.3951%" y="469" width="1.2346%" height="15" fill="rgb(215,211,37)" fg:x="23" fg:w="1"/><text x="28.6451%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (1 samples, 1.23%)</title><rect x="28.3951%" y="453" width="1.2346%" height="15" fill="rgb(241,128,51)" fg:x="23" fg:w="1"/><text x="28.6451%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (1 samples, 1.23%)</title><rect x="28.3951%" y="437" width="1.2346%" height="15" fill="rgb(227,165,31)" fg:x="23" fg:w="1"/><text x="28.6451%" y="447.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (1 samples, 1.23%)</title><rect x="28.3951%" y="421" width="1.2346%" height="15" fill="rgb(228,167,24)" fg:x="23" fg:w="1"/><text x="28.6451%" y="431.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut::precondition_check (1 samples, 1.23%)</title><rect x="28.3951%" y="405" width="1.2346%" height="15" fill="rgb(228,143,12)" fg:x="23" fg:w="1"/><text x="28.6451%" y="415.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 1.23%)</title><rect x="28.3951%" y="389" width="1.2346%" height="15" fill="rgb(249,149,8)" fg:x="23" fg:w="1"/><text x="28.6451%" y="399.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.23%)</title><rect x="28.3951%" y="373" width="1.2346%" height="15" fill="rgb(243,35,44)" fg:x="23" fg:w="1"/><text x="28.6451%" y="383.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.23%)</title><rect x="28.3951%" y="357" width="1.2346%" height="15" fill="rgb(246,89,9)" fg:x="23" fg:w="1"/><text x="28.6451%" y="367.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.23%)</title><rect x="28.3951%" y="341" width="1.2346%" height="15" fill="rgb(233,213,13)" fg:x="23" fg:w="1"/><text x="28.6451%" y="351.50"></text></g><g><title>serde_core::de::impls::&lt;impl serde_core::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 2.47%)</title><rect x="28.3951%" y="597" width="2.4691%" height="15" fill="rgb(233,141,41)" fg:x="23" fg:w="2"/><text x="28.6451%" y="607.50">se..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde_core::de::Deserializer&gt;::deserialize_map (2 samples, 2.47%)</title><rect x="28.3951%" y="581" width="2.4691%" height="15" fill="rgb(239,167,4)" fg:x="23" fg:w="2"/><text x="28.6451%" y="591.50">&lt;&amp;..</text></g><g><title>&lt;serde_core::de::impls::&lt;impl serde_core::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize::MapVisitor&lt;K,V,S&gt; as serde_core::de::Visitor&gt;::visit_map (2 samples, 2.47%)</title><rect x="28.3951%" y="565" width="2.4691%" height="15" fill="rgb(209,217,16)" fg:x="23" fg:w="2"/><text x="28.6451%" y="575.50">&lt;s..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 1.23%)</title><rect x="29.6296%" y="549" width="1.2346%" height="15" fill="rgb(219,88,35)" fg:x="24" fg:w="1"/><text x="29.8796%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 1.23%)</title><rect x="29.6296%" y="533" width="1.2346%" height="15" fill="rgb(220,193,23)" fg:x="24" fg:w="1"/><text x="29.8796%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (1 samples, 1.23%)</title><rect x="29.6296%" y="517" width="1.2346%" height="15" fill="rgb(230,90,52)" fg:x="24" fg:w="1"/><text x="29.8796%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 1.23%)</title><rect x="29.6296%" y="501" width="1.2346%" height="15" fill="rgb(252,106,19)" fg:x="24" fg:w="1"/><text x="29.8796%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 1.23%)</title><rect x="29.6296%" y="485" width="1.2346%" height="15" fill="rgb(206,74,20)" fg:x="24" fg:w="1"/><text x="29.8796%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 1.23%)</title><rect x="29.6296%" y="469" width="1.2346%" height="15" fill="rgb(230,138,44)" fg:x="24" fg:w="1"/><text x="29.8796%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 1.23%)</title><rect x="29.6296%" y="453" width="1.2346%" height="15" fill="rgb(235,182,43)" fg:x="24" fg:w="1"/><text x="29.8796%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 1.23%)</title><rect x="29.6296%" y="437" width="1.2346%" height="15" fill="rgb(242,16,51)" fg:x="24" fg:w="1"/><text x="29.8796%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (1 samples, 1.23%)</title><rect x="29.6296%" y="421" width="1.2346%" height="15" fill="rgb(248,9,4)" fg:x="24" fg:w="1"/><text x="29.8796%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 1.23%)</title><rect x="29.6296%" y="405" width="1.2346%" height="15" fill="rgb(210,31,22)" fg:x="24" fg:w="1"/><text x="29.8796%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (1 samples, 1.23%)</title><rect x="29.6296%" y="389" width="1.2346%" height="15" fill="rgb(239,54,39)" fg:x="24" fg:w="1"/><text x="29.8796%" y="399.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 1.23%)</title><rect x="29.6296%" y="373" width="1.2346%" height="15" fill="rgb(230,99,41)" fg:x="24" fg:w="1"/><text x="29.8796%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 1.23%)</title><rect x="29.6296%" y="357" width="1.2346%" height="15" fill="rgb(253,106,12)" fg:x="24" fg:w="1"/><text x="29.8796%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 1.23%)</title><rect x="29.6296%" y="341" width="1.2346%" height="15" fill="rgb(213,46,41)" fg:x="24" fg:w="1"/><text x="29.8796%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 1.23%)</title><rect x="29.6296%" y="325" width="1.2346%" height="15" fill="rgb(215,133,35)" fg:x="24" fg:w="1"/><text x="29.8796%" y="335.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.23%)</title><rect x="29.6296%" y="309" width="1.2346%" height="15" fill="rgb(213,28,5)" fg:x="24" fg:w="1"/><text x="29.8796%" y="319.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.23%)</title><rect x="29.6296%" y="293" width="1.2346%" height="15" fill="rgb(215,77,49)" fg:x="24" fg:w="1"/><text x="29.8796%" y="303.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.23%)</title><rect x="29.6296%" y="277" width="1.2346%" height="15" fill="rgb(248,100,22)" fg:x="24" fg:w="1"/><text x="29.8796%" y="287.50"></text></g><g><title>app::engine::Engine::read_orderbooks::{{closure}} (5 samples, 6.17%)</title><rect x="25.9259%" y="645" width="6.1728%" height="15" fill="rgb(208,67,9)" fg:x="21" fg:w="5"/><text x="26.1759%" y="655.50">app::eng..</text></g><g><title>serde_json::de::from_str (3 samples, 3.70%)</title><rect x="28.3951%" y="629" width="3.7037%" height="15" fill="rgb(219,133,21)" fg:x="23" fg:w="3"/><text x="28.6451%" y="639.50">serd..</text></g><g><title>serde_json::de::from_trait (3 samples, 3.70%)</title><rect x="28.3951%" y="613" width="3.7037%" height="15" fill="rgb(246,46,29)" fg:x="23" fg:w="3"/><text x="28.6451%" y="623.50">serd..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::end (1 samples, 1.23%)</title><rect x="30.8642%" y="597" width="1.2346%" height="15" fill="rgb(246,185,52)" fg:x="25" fg:w="1"/><text x="31.1142%" y="607.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 1.23%)</title><rect x="30.8642%" y="581" width="1.2346%" height="15" fill="rgb(252,136,11)" fg:x="25" fg:w="1"/><text x="31.1142%" y="591.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.23%)</title><rect x="30.8642%" y="565" width="1.2346%" height="15" fill="rgb(219,138,53)" fg:x="25" fg:w="1"/><text x="31.1142%" y="575.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.23%)</title><rect x="30.8642%" y="549" width="1.2346%" height="15" fill="rgb(211,51,23)" fg:x="25" fg:w="1"/><text x="31.1142%" y="559.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.23%)</title><rect x="30.8642%" y="533" width="1.2346%" height="15" fill="rgb(247,221,28)" fg:x="25" fg:w="1"/><text x="31.1142%" y="543.50"></text></g><g><title>app::engine::Engine::read_all_orderbooks::{{closure}}::{{closure}} (6 samples, 7.41%)</title><rect x="25.9259%" y="661" width="7.4074%" height="15" fill="rgb(251,222,45)" fg:x="21" fg:w="6"/><text x="26.1759%" y="671.50">app::engin..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 1.23%)</title><rect x="32.0988%" y="645" width="1.2346%" height="15" fill="rgb(217,162,53)" fg:x="26" fg:w="1"/><text x="32.3488%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,serde_json::value::Value,std::hash::random::RandomState&gt;&gt; (1 samples, 1.23%)</title><rect x="32.0988%" y="629" width="1.2346%" height="15" fill="rgb(229,93,14)" fg:x="26" fg:w="1"/><text x="32.3488%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,serde_json::value::Value)&gt;&gt; (1 samples, 1.23%)</title><rect x="32.0988%" y="613" width="1.2346%" height="15" fill="rgb(209,67,49)" fg:x="26" fg:w="1"/><text x="32.3488%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.23%)</title><rect x="32.0988%" y="597" width="1.2346%" height="15" fill="rgb(213,87,29)" fg:x="26" fg:w="1"/><text x="32.3488%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 1.23%)</title><rect x="32.0988%" y="581" width="1.2346%" height="15" fill="rgb(205,151,52)" fg:x="26" fg:w="1"/><text x="32.3488%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (1 samples, 1.23%)</title><rect x="32.0988%" y="565" width="1.2346%" height="15" fill="rgb(253,215,39)" fg:x="26" fg:w="1"/><text x="32.3488%" y="575.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 1.23%)</title><rect x="32.0988%" y="549" width="1.2346%" height="15" fill="rgb(221,220,41)" fg:x="26" fg:w="1"/><text x="32.3488%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 1.23%)</title><rect x="32.0988%" y="533" width="1.2346%" height="15" fill="rgb(218,133,21)" fg:x="26" fg:w="1"/><text x="32.3488%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,serde_json::value::Value)&gt; (1 samples, 1.23%)</title><rect x="32.0988%" y="517" width="1.2346%" height="15" fill="rgb(221,193,43)" fg:x="26" fg:w="1"/><text x="32.3488%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 1.23%)</title><rect x="32.0988%" y="501" width="1.2346%" height="15" fill="rgb(240,128,52)" fg:x="26" fg:w="1"/><text x="32.3488%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 1.23%)</title><rect x="32.0988%" y="485" width="1.2346%" height="15" fill="rgb(253,114,12)" fg:x="26" fg:w="1"/><text x="32.3488%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 1.23%)</title><rect x="32.0988%" y="469" width="1.2346%" height="15" fill="rgb(215,223,47)" fg:x="26" fg:w="1"/><text x="32.3488%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.23%)</title><rect x="32.0988%" y="453" width="1.2346%" height="15" fill="rgb(248,225,23)" fg:x="26" fg:w="1"/><text x="32.3488%" y="463.50"></text></g><g><title>core::mem::drop (1 samples, 1.23%)</title><rect x="32.0988%" y="437" width="1.2346%" height="15" fill="rgb(250,108,0)" fg:x="26" fg:w="1"/><text x="32.3488%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 1.23%)</title><rect x="32.0988%" y="421" width="1.2346%" height="15" fill="rgb(228,208,7)" fg:x="26" fg:w="1"/><text x="32.3488%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.23%)</title><rect x="32.0988%" y="405" width="1.2346%" height="15" fill="rgb(244,45,10)" fg:x="26" fg:w="1"/><text x="32.3488%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (1 samples, 1.23%)</title><rect x="32.0988%" y="389" width="1.2346%" height="15" fill="rgb(207,125,25)" fg:x="26" fg:w="1"/><text x="32.3488%" y="399.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (1 samples, 1.23%)</title><rect x="32.0988%" y="373" width="1.2346%" height="15" fill="rgb(210,195,18)" fg:x="26" fg:w="1"/><text x="32.3488%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 1.23%)</title><rect x="32.0988%" y="357" width="1.2346%" height="15" fill="rgb(249,80,12)" fg:x="26" fg:w="1"/><text x="32.3488%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.23%)</title><rect x="32.0988%" y="341" width="1.2346%" height="15" fill="rgb(221,65,9)" fg:x="26" fg:w="1"/><text x="32.3488%" y="351.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.23%)</title><rect x="32.0988%" y="325" width="1.2346%" height="15" fill="rgb(235,49,36)" fg:x="26" fg:w="1"/><text x="32.3488%" y="335.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.23%)</title><rect x="32.0988%" y="309" width="1.2346%" height="15" fill="rgb(225,32,20)" fg:x="26" fg:w="1"/><text x="32.3488%" y="319.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.23%)</title><rect x="32.0988%" y="293" width="1.2346%" height="15" fill="rgb(215,141,46)" fg:x="26" fg:w="1"/><text x="32.3488%" y="303.50"></text></g><g><title>123145477079040 (13 samples, 16.05%)</title><rect x="22.2222%" y="1669" width="16.0494%" height="15" fill="rgb(250,160,47)" fg:x="18" fg:w="13"/><text x="22.4722%" y="1679.50">123145477079040</text></g><g><title>__pthread_start (12 samples, 14.81%)</title><rect x="23.4568%" y="1653" width="14.8148%" height="15" fill="rgb(216,222,40)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1663.50">__pthread_start</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (12 samples, 14.81%)</title><rect x="23.4568%" y="1637" width="14.8148%" height="15" fill="rgb(234,217,39)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1647.50">std::sys::pal::unix::th..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (12 samples, 14.81%)</title><rect x="23.4568%" y="1621" width="14.8148%" height="15" fill="rgb(207,178,40)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1631.50">&lt;alloc::boxed::Box&lt;F,A&gt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (12 samples, 14.81%)</title><rect x="23.4568%" y="1605" width="14.8148%" height="15" fill="rgb(221,136,13)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1615.50">&lt;alloc::boxed::Box&lt;F,A&gt;..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (12 samples, 14.81%)</title><rect x="23.4568%" y="1589" width="14.8148%" height="15" fill="rgb(249,199,10)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1599.50">core::ops::function::Fn..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (12 samples, 14.81%)</title><rect x="23.4568%" y="1573" width="14.8148%" height="15" fill="rgb(249,222,13)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1583.50">std::thread::Builder::s..</text></g><g><title>std::panic::catch_unwind (12 samples, 14.81%)</title><rect x="23.4568%" y="1557" width="14.8148%" height="15" fill="rgb(244,185,38)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1567.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (12 samples, 14.81%)</title><rect x="23.4568%" y="1541" width="14.8148%" height="15" fill="rgb(236,202,9)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1551.50">std::panicking::try</text></g><g><title>___rust_try (12 samples, 14.81%)</title><rect x="23.4568%" y="1525" width="14.8148%" height="15" fill="rgb(250,229,37)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1535.50">___rust_try</text></g><g><title>std::panicking::try::do_call (12 samples, 14.81%)</title><rect x="23.4568%" y="1509" width="14.8148%" height="15" fill="rgb(206,174,23)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1519.50">std::panicking::try::do..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (12 samples, 14.81%)</title><rect x="23.4568%" y="1493" width="14.8148%" height="15" fill="rgb(211,33,43)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1503.50">&lt;core::panic::unwind_sa..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (12 samples, 14.81%)</title><rect x="23.4568%" y="1477" width="14.8148%" height="15" fill="rgb(245,58,50)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1487.50">std::thread::Builder::s..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (12 samples, 14.81%)</title><rect x="23.4568%" y="1461" width="14.8148%" height="15" fill="rgb(244,68,36)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1471.50">std::sys::backtrace::__..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (12 samples, 14.81%)</title><rect x="23.4568%" y="1445" width="14.8148%" height="15" fill="rgb(232,229,15)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1455.50">tokio::runtime::blockin..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (12 samples, 14.81%)</title><rect x="23.4568%" y="1429" width="14.8148%" height="15" fill="rgb(254,30,23)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1439.50">tokio::runtime::blockin..</text></g><g><title>tokio::runtime::blocking::pool::Task::run (12 samples, 14.81%)</title><rect x="23.4568%" y="1413" width="14.8148%" height="15" fill="rgb(235,160,14)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1423.50">tokio::runtime::blockin..</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (12 samples, 14.81%)</title><rect x="23.4568%" y="1397" width="14.8148%" height="15" fill="rgb(212,155,44)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1407.50">tokio::runtime::task::U..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (12 samples, 14.81%)</title><rect x="23.4568%" y="1381" width="14.8148%" height="15" fill="rgb(226,2,50)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1391.50">tokio::runtime::task::r..</text></g><g><title>tokio::runtime::task::raw::poll (12 samples, 14.81%)</title><rect x="23.4568%" y="1365" width="14.8148%" height="15" fill="rgb(234,177,6)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1375.50">tokio::runtime::task::r..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (12 samples, 14.81%)</title><rect x="23.4568%" y="1349" width="14.8148%" height="15" fill="rgb(217,24,9)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1359.50">tokio::runtime::task::h..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (12 samples, 14.81%)</title><rect x="23.4568%" y="1333" width="14.8148%" height="15" fill="rgb(220,13,46)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1343.50">tokio::runtime::task::h..</text></g><g><title>tokio::runtime::task::harness::poll_future (12 samples, 14.81%)</title><rect x="23.4568%" y="1317" width="14.8148%" height="15" fill="rgb(239,221,27)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1327.50">tokio::runtime::task::h..</text></g><g><title>std::panic::catch_unwind (12 samples, 14.81%)</title><rect x="23.4568%" y="1301" width="14.8148%" height="15" fill="rgb(222,198,25)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1311.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (12 samples, 14.81%)</title><rect x="23.4568%" y="1285" width="14.8148%" height="15" fill="rgb(211,99,13)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1295.50">std::panicking::try</text></g><g><title>___rust_try (12 samples, 14.81%)</title><rect x="23.4568%" y="1269" width="14.8148%" height="15" fill="rgb(232,111,31)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1279.50">___rust_try</text></g><g><title>std::panicking::try::do_call (12 samples, 14.81%)</title><rect x="23.4568%" y="1253" width="14.8148%" height="15" fill="rgb(245,82,37)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1263.50">std::panicking::try::do..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (12 samples, 14.81%)</title><rect x="23.4568%" y="1237" width="14.8148%" height="15" fill="rgb(227,149,46)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1247.50">&lt;core::panic::unwind_sa..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (12 samples, 14.81%)</title><rect x="23.4568%" y="1221" width="14.8148%" height="15" fill="rgb(218,36,50)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1231.50">tokio::runtime::task::h..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (12 samples, 14.81%)</title><rect x="23.4568%" y="1205" width="14.8148%" height="15" fill="rgb(226,80,48)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1215.50">tokio::runtime::task::c..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (12 samples, 14.81%)</title><rect x="23.4568%" y="1189" width="14.8148%" height="15" fill="rgb(238,224,15)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1199.50">tokio::loom::std::unsaf..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (12 samples, 14.81%)</title><rect x="23.4568%" y="1173" width="14.8148%" height="15" fill="rgb(241,136,10)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1183.50">tokio::runtime::task::c..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (12 samples, 14.81%)</title><rect x="23.4568%" y="1157" width="14.8148%" height="15" fill="rgb(208,32,45)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1167.50">&lt;tokio::runtime::blocki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}} (12 samples, 14.81%)</title><rect x="23.4568%" y="1141" width="14.8148%" height="15" fill="rgb(207,135,9)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1151.50">tokio::runtime::schedul..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (12 samples, 14.81%)</title><rect x="23.4568%" y="1125" width="14.8148%" height="15" fill="rgb(206,86,44)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1135.50">tokio::runtime::schedul..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (12 samples, 14.81%)</title><rect x="23.4568%" y="1109" width="14.8148%" height="15" fill="rgb(245,177,15)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1119.50">tokio::runtime::context..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}} (12 samples, 14.81%)</title><rect x="23.4568%" y="1093" width="14.8148%" height="15" fill="rgb(206,64,50)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1103.50">tokio::runtime::schedul..</text></g><g><title>tokio::runtime::context::set_scheduler (12 samples, 14.81%)</title><rect x="23.4568%" y="1077" width="14.8148%" height="15" fill="rgb(234,36,40)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1087.50">tokio::runtime::context..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (12 samples, 14.81%)</title><rect x="23.4568%" y="1061" width="14.8148%" height="15" fill="rgb(213,64,8)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1071.50">std::thread::local::Loc..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (12 samples, 14.81%)</title><rect x="23.4568%" y="1045" width="14.8148%" height="15" fill="rgb(210,75,36)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1055.50">std::thread::local::Loc..</text></g><g><title>tokio::runtime::context::set_scheduler::{{closure}} (12 samples, 14.81%)</title><rect x="23.4568%" y="1029" width="14.8148%" height="15" fill="rgb(229,88,21)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1039.50">tokio::runtime::context..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (12 samples, 14.81%)</title><rect x="23.4568%" y="1013" width="14.8148%" height="15" fill="rgb(252,204,47)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1023.50">tokio::runtime::context..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}}::{{closure}} (12 samples, 14.81%)</title><rect x="23.4568%" y="997" width="14.8148%" height="15" fill="rgb(208,77,27)" fg:x="19" fg:w="12"/><text x="23.7068%" y="1007.50">tokio::runtime::schedul..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (12 samples, 14.81%)</title><rect x="23.4568%" y="981" width="14.8148%" height="15" fill="rgb(221,76,26)" fg:x="19" fg:w="12"/><text x="23.7068%" y="991.50">tokio::runtime::schedul..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (10 samples, 12.35%)</title><rect x="25.9259%" y="965" width="12.3457%" height="15" fill="rgb(225,139,18)" fg:x="21" fg:w="10"/><text x="26.1759%" y="975.50">tokio::runtime::sc..</text></g><g><title>tokio::task::coop::budget (10 samples, 12.35%)</title><rect x="25.9259%" y="949" width="12.3457%" height="15" fill="rgb(230,137,11)" fg:x="21" fg:w="10"/><text x="26.1759%" y="959.50">tokio::task::coop:..</text></g><g><title>tokio::task::coop::with_budget (10 samples, 12.35%)</title><rect x="25.9259%" y="933" width="12.3457%" height="15" fill="rgb(212,28,1)" fg:x="21" fg:w="10"/><text x="26.1759%" y="943.50">tokio::task::coop:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}} (10 samples, 12.35%)</title><rect x="25.9259%" y="917" width="12.3457%" height="15" fill="rgb(248,164,17)" fg:x="21" fg:w="10"/><text x="26.1759%" y="927.50">tokio::runtime::sc..</text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (10 samples, 12.35%)</title><rect x="25.9259%" y="901" width="12.3457%" height="15" fill="rgb(222,171,42)" fg:x="21" fg:w="10"/><text x="26.1759%" y="911.50">tokio::runtime::ta..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (10 samples, 12.35%)</title><rect x="25.9259%" y="885" width="12.3457%" height="15" fill="rgb(243,84,45)" fg:x="21" fg:w="10"/><text x="26.1759%" y="895.50">tokio::runtime::ta..</text></g><g><title>tokio::runtime::task::raw::poll (10 samples, 12.35%)</title><rect x="25.9259%" y="869" width="12.3457%" height="15" fill="rgb(252,49,23)" fg:x="21" fg:w="10"/><text x="26.1759%" y="879.50">tokio::runtime::ta..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (10 samples, 12.35%)</title><rect x="25.9259%" y="853" width="12.3457%" height="15" fill="rgb(215,19,7)" fg:x="21" fg:w="10"/><text x="26.1759%" y="863.50">tokio::runtime::ta..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (10 samples, 12.35%)</title><rect x="25.9259%" y="837" width="12.3457%" height="15" fill="rgb(238,81,41)" fg:x="21" fg:w="10"/><text x="26.1759%" y="847.50">tokio::runtime::ta..</text></g><g><title>tokio::runtime::task::harness::poll_future (10 samples, 12.35%)</title><rect x="25.9259%" y="821" width="12.3457%" height="15" fill="rgb(210,199,37)" fg:x="21" fg:w="10"/><text x="26.1759%" y="831.50">tokio::runtime::ta..</text></g><g><title>std::panic::catch_unwind (10 samples, 12.35%)</title><rect x="25.9259%" y="805" width="12.3457%" height="15" fill="rgb(244,192,49)" fg:x="21" fg:w="10"/><text x="26.1759%" y="815.50">std::panic::catch_..</text></g><g><title>std::panicking::try (10 samples, 12.35%)</title><rect x="25.9259%" y="789" width="12.3457%" height="15" fill="rgb(226,211,11)" fg:x="21" fg:w="10"/><text x="26.1759%" y="799.50">std::panicking::try</text></g><g><title>___rust_try (10 samples, 12.35%)</title><rect x="25.9259%" y="773" width="12.3457%" height="15" fill="rgb(236,162,54)" fg:x="21" fg:w="10"/><text x="26.1759%" y="783.50">___rust_try</text></g><g><title>std::panicking::try::do_call (10 samples, 12.35%)</title><rect x="25.9259%" y="757" width="12.3457%" height="15" fill="rgb(220,229,9)" fg:x="21" fg:w="10"/><text x="26.1759%" y="767.50">std::panicking::tr..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (10 samples, 12.35%)</title><rect x="25.9259%" y="741" width="12.3457%" height="15" fill="rgb(250,87,22)" fg:x="21" fg:w="10"/><text x="26.1759%" y="751.50">&lt;core::panic::unwi..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (10 samples, 12.35%)</title><rect x="25.9259%" y="725" width="12.3457%" height="15" fill="rgb(239,43,17)" fg:x="21" fg:w="10"/><text x="26.1759%" y="735.50">tokio::runtime::ta..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (10 samples, 12.35%)</title><rect x="25.9259%" y="709" width="12.3457%" height="15" fill="rgb(231,177,25)" fg:x="21" fg:w="10"/><text x="26.1759%" y="719.50">tokio::runtime::ta..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (10 samples, 12.35%)</title><rect x="25.9259%" y="693" width="12.3457%" height="15" fill="rgb(219,179,1)" fg:x="21" fg:w="10"/><text x="26.1759%" y="703.50">tokio::loom::std::..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (10 samples, 12.35%)</title><rect x="25.9259%" y="677" width="12.3457%" height="15" fill="rgb(238,219,53)" fg:x="21" fg:w="10"/><text x="26.1759%" y="687.50">tokio::runtime::ta..</text></g><g><title>app::main::{{closure}}::{{closure}} (4 samples, 4.94%)</title><rect x="33.3333%" y="661" width="4.9383%" height="15" fill="rgb(232,167,36)" fg:x="27" fg:w="4"/><text x="33.5833%" y="671.50">app::m..</text></g><g><title>app::engine::Engine::read_all_orderbooks::{{closure}} (4 samples, 4.94%)</title><rect x="33.3333%" y="645" width="4.9383%" height="15" fill="rgb(244,19,51)" fg:x="27" fg:w="4"/><text x="33.5833%" y="655.50">app::e..</text></g><g><title>std::io::stdio::_print (4 samples, 4.94%)</title><rect x="33.3333%" y="629" width="4.9383%" height="15" fill="rgb(224,6,22)" fg:x="27" fg:w="4"/><text x="33.5833%" y="639.50">std::i..</text></g><g><title>std::io::stdio::print_to (4 samples, 4.94%)</title><rect x="33.3333%" y="613" width="4.9383%" height="15" fill="rgb(224,145,5)" fg:x="27" fg:w="4"/><text x="33.5833%" y="623.50">std::i..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (4 samples, 4.94%)</title><rect x="33.3333%" y="597" width="4.9383%" height="15" fill="rgb(234,130,49)" fg:x="27" fg:w="4"/><text x="33.5833%" y="607.50">&lt;std::..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (4 samples, 4.94%)</title><rect x="33.3333%" y="581" width="4.9383%" height="15" fill="rgb(254,6,2)" fg:x="27" fg:w="4"/><text x="33.5833%" y="591.50">&lt;&amp;std:..</text></g><g><title>std::io::Write::write_fmt (4 samples, 4.94%)</title><rect x="33.3333%" y="565" width="4.9383%" height="15" fill="rgb(208,96,46)" fg:x="27" fg:w="4"/><text x="33.5833%" y="575.50">std::i..</text></g><g><title>std::io::default_write_fmt (4 samples, 4.94%)</title><rect x="33.3333%" y="549" width="4.9383%" height="15" fill="rgb(239,3,39)" fg:x="27" fg:w="4"/><text x="33.5833%" y="559.50">std::i..</text></g><g><title>core::fmt::write (4 samples, 4.94%)</title><rect x="33.3333%" y="533" width="4.9383%" height="15" fill="rgb(233,210,1)" fg:x="27" fg:w="4"/><text x="33.5833%" y="543.50">core::..</text></g><g><title>&lt;std::io::default_write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 4.94%)</title><rect x="33.3333%" y="517" width="4.9383%" height="15" fill="rgb(244,137,37)" fg:x="27" fg:w="4"/><text x="33.5833%" y="527.50">&lt;std::..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (4 samples, 4.94%)</title><rect x="33.3333%" y="501" width="4.9383%" height="15" fill="rgb(240,136,2)" fg:x="27" fg:w="4"/><text x="33.5833%" y="511.50">&lt;std::..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (4 samples, 4.94%)</title><rect x="33.3333%" y="485" width="4.9383%" height="15" fill="rgb(239,18,37)" fg:x="27" fg:w="4"/><text x="33.5833%" y="495.50">&lt;std::..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (4 samples, 4.94%)</title><rect x="33.3333%" y="469" width="4.9383%" height="15" fill="rgb(218,185,22)" fg:x="27" fg:w="4"/><text x="33.5833%" y="479.50">&lt;std::..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (4 samples, 4.94%)</title><rect x="33.3333%" y="453" width="4.9383%" height="15" fill="rgb(225,218,4)" fg:x="27" fg:w="4"/><text x="33.5833%" y="463.50">std::i..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (4 samples, 4.94%)</title><rect x="33.3333%" y="437" width="4.9383%" height="15" fill="rgb(230,182,32)" fg:x="27" fg:w="4"/><text x="33.5833%" y="447.50">&lt;std::..</text></g><g><title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (4 samples, 4.94%)</title><rect x="33.3333%" y="421" width="4.9383%" height="15" fill="rgb(242,56,43)" fg:x="27" fg:w="4"/><text x="33.5833%" y="431.50">&lt;std::..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (4 samples, 4.94%)</title><rect x="33.3333%" y="405" width="4.9383%" height="15" fill="rgb(233,99,24)" fg:x="27" fg:w="4"/><text x="33.5833%" y="415.50">std::s..</text></g><g><title>_write (4 samples, 4.94%)</title><rect x="33.3333%" y="389" width="4.9383%" height="15" fill="rgb(234,209,42)" fg:x="27" fg:w="4"/><text x="33.5833%" y="399.50">_write</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (4 samples, 4.94%)</title><rect x="33.3333%" y="373" width="4.9383%" height="15" fill="rgb(227,7,12)" fg:x="27" fg:w="4"/><text x="33.5833%" y="383.50">&lt;pprof..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (4 samples, 4.94%)</title><rect x="33.3333%" y="357" width="4.9383%" height="15" fill="rgb(245,203,43)" fg:x="27" fg:w="4"/><text x="33.5833%" y="367.50">backtr..</text></g><g><title>backtrace::backtrace::libunwind::trace (4 samples, 4.94%)</title><rect x="33.3333%" y="341" width="4.9383%" height="15" fill="rgb(238,205,33)" fg:x="27" fg:w="4"/><text x="33.5833%" y="351.50">backtr..</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (4 samples, 4.94%)</title><rect x="38.2716%" y="1653" width="4.9383%" height="15" fill="rgb(231,56,7)" fg:x="31" fg:w="4"/><text x="38.5216%" y="1663.50">&lt;pprof..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (4 samples, 4.94%)</title><rect x="38.2716%" y="1637" width="4.9383%" height="15" fill="rgb(244,186,29)" fg:x="31" fg:w="4"/><text x="38.5216%" y="1647.50">backtr..</text></g><g><title>backtrace::backtrace::libunwind::trace (4 samples, 4.94%)</title><rect x="38.2716%" y="1621" width="4.9383%" height="15" fill="rgb(234,111,31)" fg:x="31" fg:w="4"/><text x="38.5216%" y="1631.50">backtr..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (1 samples, 1.23%)</title><rect x="43.2099%" y="901" width="1.2346%" height="15" fill="rgb(241,149,10)" fg:x="35" fg:w="1"/><text x="43.4599%" y="911.50"></text></g><g><title>std::sync::poison::condvar::Condvar::wait (1 samples, 1.23%)</title><rect x="43.2099%" y="885" width="1.2346%" height="15" fill="rgb(249,206,44)" fg:x="35" fg:w="1"/><text x="43.4599%" y="895.50"></text></g><g><title>std::sys::sync::condvar::pthread::Condvar::wait (1 samples, 1.23%)</title><rect x="43.2099%" y="869" width="1.2346%" height="15" fill="rgb(251,153,30)" fg:x="35" fg:w="1"/><text x="43.4599%" y="879.50"></text></g><g><title>std::sys::pal::unix::sync::condvar::Condvar::wait (1 samples, 1.23%)</title><rect x="43.2099%" y="853" width="1.2346%" height="15" fill="rgb(239,152,38)" fg:x="35" fg:w="1"/><text x="43.4599%" y="863.50"></text></g><g><title>__pthread_cond_wait (1 samples, 1.23%)</title><rect x="43.2099%" y="837" width="1.2346%" height="15" fill="rgb(249,139,47)" fg:x="35" fg:w="1"/><text x="43.4599%" y="847.50"></text></g><g><title>___psynch_cvwait (1 samples, 1.23%)</title><rect x="43.2099%" y="821" width="1.2346%" height="15" fill="rgb(244,64,35)" fg:x="35" fg:w="1"/><text x="43.4599%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.23%)</title><rect x="43.2099%" y="805" width="1.2346%" height="15" fill="rgb(216,46,15)" fg:x="35" fg:w="1"/><text x="43.4599%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.23%)</title><rect x="43.2099%" y="789" width="1.2346%" height="15" fill="rgb(250,74,19)" fg:x="35" fg:w="1"/><text x="43.4599%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.23%)</title><rect x="43.2099%" y="773" width="1.2346%" height="15" fill="rgb(249,42,33)" fg:x="35" fg:w="1"/><text x="43.4599%" y="783.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (3 samples, 3.70%)</title><rect x="43.2099%" y="965" width="3.7037%" height="15" fill="rgb(242,149,17)" fg:x="35" fg:w="3"/><text x="43.4599%" y="975.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (3 samples, 3.70%)</title><rect x="43.2099%" y="949" width="3.7037%" height="15" fill="rgb(244,29,21)" fg:x="35" fg:w="3"/><text x="43.4599%" y="959.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (3 samples, 3.70%)</title><rect x="43.2099%" y="933" width="3.7037%" height="15" fill="rgb(220,130,37)" fg:x="35" fg:w="3"/><text x="43.4599%" y="943.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (3 samples, 3.70%)</title><rect x="43.2099%" y="917" width="3.7037%" height="15" fill="rgb(211,67,2)" fg:x="35" fg:w="3"/><text x="43.4599%" y="927.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (2 samples, 2.47%)</title><rect x="44.4444%" y="901" width="2.4691%" height="15" fill="rgb(235,68,52)" fg:x="36" fg:w="2"/><text x="44.6944%" y="911.50">to..</text></g><g><title>tokio::runtime::driver::Driver::park (2 samples, 2.47%)</title><rect x="44.4444%" y="885" width="2.4691%" height="15" fill="rgb(246,142,3)" fg:x="36" fg:w="2"/><text x="44.6944%" y="895.50">to..</text></g><g><title>tokio::runtime::driver::TimeDriver::park (2 samples, 2.47%)</title><rect x="44.4444%" y="869" width="2.4691%" height="15" fill="rgb(241,25,7)" fg:x="36" fg:w="2"/><text x="44.6944%" y="879.50">to..</text></g><g><title>tokio::runtime::time::Driver::park (2 samples, 2.47%)</title><rect x="44.4444%" y="853" width="2.4691%" height="15" fill="rgb(242,119,39)" fg:x="36" fg:w="2"/><text x="44.6944%" y="863.50">to..</text></g><g><title>tokio::runtime::time::Driver::park_internal (2 samples, 2.47%)</title><rect x="44.4444%" y="837" width="2.4691%" height="15" fill="rgb(241,98,45)" fg:x="36" fg:w="2"/><text x="44.6944%" y="847.50">to..</text></g><g><title>tokio::runtime::time::Driver::park_thread_timeout (2 samples, 2.47%)</title><rect x="44.4444%" y="821" width="2.4691%" height="15" fill="rgb(254,28,30)" fg:x="36" fg:w="2"/><text x="44.6944%" y="831.50">to..</text></g><g><title>tokio::runtime::driver::IoStack::park_timeout (2 samples, 2.47%)</title><rect x="44.4444%" y="805" width="2.4691%" height="15" fill="rgb(241,142,54)" fg:x="36" fg:w="2"/><text x="44.6944%" y="815.50">to..</text></g><g><title>tokio::runtime::io::driver::Driver::park_timeout (2 samples, 2.47%)</title><rect x="44.4444%" y="789" width="2.4691%" height="15" fill="rgb(222,85,15)" fg:x="36" fg:w="2"/><text x="44.6944%" y="799.50">to..</text></g><g><title>tokio::runtime::io::driver::Driver::turn (2 samples, 2.47%)</title><rect x="44.4444%" y="773" width="2.4691%" height="15" fill="rgb(210,85,47)" fg:x="36" fg:w="2"/><text x="44.6944%" y="783.50">to..</text></g><g><title>mio::poll::Poll::poll (2 samples, 2.47%)</title><rect x="44.4444%" y="757" width="2.4691%" height="15" fill="rgb(224,206,25)" fg:x="36" fg:w="2"/><text x="44.6944%" y="767.50">mi..</text></g><g><title>mio::sys::unix::selector::Selector::select (2 samples, 2.47%)</title><rect x="44.4444%" y="741" width="2.4691%" height="15" fill="rgb(243,201,19)" fg:x="36" fg:w="2"/><text x="44.6944%" y="751.50">mi..</text></g><g><title>_kevent (2 samples, 2.47%)</title><rect x="44.4444%" y="725" width="2.4691%" height="15" fill="rgb(236,59,4)" fg:x="36" fg:w="2"/><text x="44.6944%" y="735.50">_k..</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 2.47%)</title><rect x="44.4444%" y="709" width="2.4691%" height="15" fill="rgb(254,179,45)" fg:x="36" fg:w="2"/><text x="44.6944%" y="719.50">&lt;p..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 2.47%)</title><rect x="44.4444%" y="693" width="2.4691%" height="15" fill="rgb(226,14,10)" fg:x="36" fg:w="2"/><text x="44.6944%" y="703.50">ba..</text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 2.47%)</title><rect x="44.4444%" y="677" width="2.4691%" height="15" fill="rgb(244,27,41)" fg:x="36" fg:w="2"/><text x="44.6944%" y="687.50">ba..</text></g><g><title>&lt;tokio_tungstenite::compat::AllowStd&lt;S&gt; as std::io::Read&gt;::read (6 samples, 7.41%)</title><rect x="46.9136%" y="453" width="7.4074%" height="15" fill="rgb(235,35,32)" fg:x="38" fg:w="6"/><text x="47.1636%" y="463.50">&lt;tokio_tun..</text></g><g><title>tokio_tungstenite::compat::AllowStd&lt;S&gt;::with_context (6 samples, 7.41%)</title><rect x="46.9136%" y="437" width="7.4074%" height="15" fill="rgb(218,68,31)" fg:x="38" fg:w="6"/><text x="47.1636%" y="447.50">tokio_tung..</text></g><g><title>&lt;tokio_tungstenite::compat::AllowStd&lt;S&gt; as std::io::Read&gt;::read::{{closure}} (6 samples, 7.41%)</title><rect x="46.9136%" y="421" width="7.4074%" height="15" fill="rgb(207,120,37)" fg:x="38" fg:w="6"/><text x="47.1636%" y="431.50">&lt;tokio_tun..</text></g><g><title>&lt;tokio_tungstenite::stream::MaybeTlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (6 samples, 7.41%)</title><rect x="46.9136%" y="405" width="7.4074%" height="15" fill="rgb(227,98,0)" fg:x="38" fg:w="6"/><text x="47.1636%" y="415.50">&lt;tokio_tun..</text></g><g><title>&lt;tokio_rustls::client::TlsStream&lt;IO&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (6 samples, 7.41%)</title><rect x="46.9136%" y="389" width="7.4074%" height="15" fill="rgb(207,7,3)" fg:x="38" fg:w="6"/><text x="47.1636%" y="399.50">&lt;tokio_rus..</text></g><g><title>&lt;tokio_rustls::client::TlsStream&lt;IO&gt; as tokio::io::async_buf_read::AsyncBufRead&gt;::poll_fill_buf (6 samples, 7.41%)</title><rect x="46.9136%" y="373" width="7.4074%" height="15" fill="rgb(206,98,19)" fg:x="38" fg:w="6"/><text x="47.1636%" y="383.50">&lt;tokio_rus..</text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::poll_fill_buf (6 samples, 7.41%)</title><rect x="46.9136%" y="357" width="7.4074%" height="15" fill="rgb(217,5,26)" fg:x="38" fg:w="6"/><text x="47.1636%" y="367.50">tokio_rust..</text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (6 samples, 7.41%)</title><rect x="46.9136%" y="341" width="7.4074%" height="15" fill="rgb(235,190,38)" fg:x="38" fg:w="6"/><text x="47.1636%" y="351.50">tokio_rust..</text></g><g><title>rustls::conn::ConnectionCommon&lt;Data&gt;::read_tls (6 samples, 7.41%)</title><rect x="46.9136%" y="325" width="7.4074%" height="15" fill="rgb(247,86,24)" fg:x="38" fg:w="6"/><text x="47.1636%" y="335.50">rustls::co..</text></g><g><title>rustls::msgs::deframer::buffers::DeframerVecBuffer::read (6 samples, 7.41%)</title><rect x="46.9136%" y="309" width="7.4074%" height="15" fill="rgb(205,101,16)" fg:x="38" fg:w="6"/><text x="47.1636%" y="319.50">rustls::ms..</text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (6 samples, 7.41%)</title><rect x="46.9136%" y="293" width="7.4074%" height="15" fill="rgb(246,168,33)" fg:x="38" fg:w="6"/><text x="47.1636%" y="303.50">&lt;tokio_rus..</text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (6 samples, 7.41%)</title><rect x="46.9136%" y="277" width="7.4074%" height="15" fill="rgb(231,114,1)" fg:x="38" fg:w="6"/><text x="47.1636%" y="287.50">&lt;&amp;mut T as..</text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (6 samples, 7.41%)</title><rect x="46.9136%" y="261" width="7.4074%" height="15" fill="rgb(207,184,53)" fg:x="38" fg:w="6"/><text x="47.1636%" y="271.50">&lt;tokio::ne..</text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (6 samples, 7.41%)</title><rect x="46.9136%" y="245" width="7.4074%" height="15" fill="rgb(224,95,51)" fg:x="38" fg:w="6"/><text x="47.1636%" y="255.50">tokio::net..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (6 samples, 7.41%)</title><rect x="46.9136%" y="229" width="7.4074%" height="15" fill="rgb(212,188,45)" fg:x="38" fg:w="6"/><text x="47.1636%" y="239.50">tokio::io:..</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (6 samples, 7.41%)</title><rect x="46.9136%" y="213" width="7.4074%" height="15" fill="rgb(223,154,38)" fg:x="38" fg:w="6"/><text x="47.1636%" y="223.50">&lt;&amp;mio::net..</text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (6 samples, 7.41%)</title><rect x="46.9136%" y="197" width="7.4074%" height="15" fill="rgb(251,22,52)" fg:x="38" fg:w="6"/><text x="47.1636%" y="207.50">mio::io_so..</text></g><g><title>mio::sys::unix::selector::stateless_io_source::IoSourceState::do_io (6 samples, 7.41%)</title><rect x="46.9136%" y="181" width="7.4074%" height="15" fill="rgb(229,209,22)" fg:x="38" fg:w="6"/><text x="47.1636%" y="191.50">mio::sys::..</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::{{closure}} (6 samples, 7.41%)</title><rect x="46.9136%" y="165" width="7.4074%" height="15" fill="rgb(234,138,34)" fg:x="38" fg:w="6"/><text x="47.1636%" y="175.50">&lt;&amp;mio::net..</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (6 samples, 7.41%)</title><rect x="46.9136%" y="149" width="7.4074%" height="15" fill="rgb(212,95,11)" fg:x="38" fg:w="6"/><text x="47.1636%" y="159.50">&lt;&amp;std::net..</text></g><g><title>std::sys::net::connection::socket::TcpStream::read (6 samples, 7.41%)</title><rect x="46.9136%" y="133" width="7.4074%" height="15" fill="rgb(240,179,47)" fg:x="38" fg:w="6"/><text x="47.1636%" y="143.50">std::sys::..</text></g><g><title>std::sys::net::connection::socket::unix::Socket::read (6 samples, 7.41%)</title><rect x="46.9136%" y="117" width="7.4074%" height="15" fill="rgb(240,163,11)" fg:x="38" fg:w="6"/><text x="47.1636%" y="127.50">std::sys::..</text></g><g><title>std::sys::net::connection::socket::unix::Socket::recv_with_flags (6 samples, 7.41%)</title><rect x="46.9136%" y="101" width="7.4074%" height="15" fill="rgb(236,37,12)" fg:x="38" fg:w="6"/><text x="47.1636%" y="111.50">std::sys::..</text></g><g><title>_recvfrom (6 samples, 7.41%)</title><rect x="46.9136%" y="85" width="7.4074%" height="15" fill="rgb(232,164,16)" fg:x="38" fg:w="6"/><text x="47.1636%" y="95.50">_recvfrom</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (6 samples, 7.41%)</title><rect x="46.9136%" y="69" width="7.4074%" height="15" fill="rgb(244,205,15)" fg:x="38" fg:w="6"/><text x="47.1636%" y="79.50">&lt;pprof::ba..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (6 samples, 7.41%)</title><rect x="46.9136%" y="53" width="7.4074%" height="15" fill="rgb(223,117,47)" fg:x="38" fg:w="6"/><text x="47.1636%" y="63.50">backtrace:..</text></g><g><title>backtrace::backtrace::libunwind::trace (6 samples, 7.41%)</title><rect x="46.9136%" y="37" width="7.4074%" height="15" fill="rgb(244,107,35)" fg:x="38" fg:w="6"/><text x="47.1636%" y="47.50">backtrace:..</text></g><g><title>&lt;futures_util::stream::stream::next::Next&lt;St&gt; as core::future::future::Future&gt;::poll (7 samples, 8.64%)</title><rect x="46.9136%" y="629" width="8.6420%" height="15" fill="rgb(205,140,8)" fg:x="38" fg:w="7"/><text x="47.1636%" y="639.50">&lt;futures_uti..</text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (7 samples, 8.64%)</title><rect x="46.9136%" y="613" width="8.6420%" height="15" fill="rgb(228,84,46)" fg:x="38" fg:w="7"/><text x="47.1636%" y="623.50">futures_util..</text></g><g><title>&lt;futures_util::stream::stream::split::SplitStream&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (7 samples, 8.64%)</title><rect x="46.9136%" y="597" width="8.6420%" height="15" fill="rgb(254,188,9)" fg:x="38" fg:w="7"/><text x="47.1636%" y="607.50">&lt;futures_uti..</text></g><g><title>&lt;tokio_tungstenite::WebSocketStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (7 samples, 8.64%)</title><rect x="46.9136%" y="581" width="8.6420%" height="15" fill="rgb(206,112,54)" fg:x="38" fg:w="7"/><text x="47.1636%" y="591.50">&lt;tokio_tungs..</text></g><g><title>tokio_tungstenite::WebSocketStream&lt;S&gt;::with_context (7 samples, 8.64%)</title><rect x="46.9136%" y="565" width="8.6420%" height="15" fill="rgb(216,84,49)" fg:x="38" fg:w="7"/><text x="47.1636%" y="575.50">tokio_tungst..</text></g><g><title>&lt;tokio_tungstenite::WebSocketStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next::{{closure}} (7 samples, 8.64%)</title><rect x="46.9136%" y="549" width="8.6420%" height="15" fill="rgb(214,194,35)" fg:x="38" fg:w="7"/><text x="47.1636%" y="559.50">&lt;tokio_tungs..</text></g><g><title>tungstenite::protocol::WebSocket&lt;Stream&gt;::read (7 samples, 8.64%)</title><rect x="46.9136%" y="533" width="8.6420%" height="15" fill="rgb(249,28,3)" fg:x="38" fg:w="7"/><text x="47.1636%" y="543.50">tungstenite:..</text></g><g><title>tungstenite::protocol::WebSocketContext::read (7 samples, 8.64%)</title><rect x="46.9136%" y="517" width="8.6420%" height="15" fill="rgb(222,56,52)" fg:x="38" fg:w="7"/><text x="47.1636%" y="527.50">tungstenite:..</text></g><g><title>tungstenite::protocol::WebSocketContext::read_message_frame (7 samples, 8.64%)</title><rect x="46.9136%" y="501" width="8.6420%" height="15" fill="rgb(245,217,50)" fg:x="38" fg:w="7"/><text x="47.1636%" y="511.50">tungstenite:..</text></g><g><title>tungstenite::protocol::frame::FrameCodec::read_frame (7 samples, 8.64%)</title><rect x="46.9136%" y="485" width="8.6420%" height="15" fill="rgb(213,201,24)" fg:x="38" fg:w="7"/><text x="47.1636%" y="495.50">tungstenite:..</text></g><g><title>tungstenite::protocol::frame::FrameCodec::read_in (7 samples, 8.64%)</title><rect x="46.9136%" y="469" width="8.6420%" height="15" fill="rgb(248,116,28)" fg:x="38" fg:w="7"/><text x="47.1636%" y="479.50">tungstenite:..</text></g><g><title>bytes::bytes_mut::BytesMut::truncate (1 samples, 1.23%)</title><rect x="54.3210%" y="453" width="1.2346%" height="15" fill="rgb(219,72,43)" fg:x="44" fg:w="1"/><text x="54.5710%" y="463.50"></text></g><g><title>bytes::bytes_mut::BytesMut::len (1 samples, 1.23%)</title><rect x="54.3210%" y="437" width="1.2346%" height="15" fill="rgb(209,138,14)" fg:x="44" fg:w="1"/><text x="54.5710%" y="447.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.23%)</title><rect x="54.3210%" y="421" width="1.2346%" height="15" fill="rgb(222,18,33)" fg:x="44" fg:w="1"/><text x="54.5710%" y="431.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.23%)</title><rect x="54.3210%" y="405" width="1.2346%" height="15" fill="rgb(213,199,7)" fg:x="44" fg:w="1"/><text x="54.5710%" y="415.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.23%)</title><rect x="54.3210%" y="389" width="1.2346%" height="15" fill="rgb(250,110,10)" fg:x="44" fg:w="1"/><text x="54.5710%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;tungstenite::protocol::frame::utf8::Utf8Bytes&gt; (1 samples, 1.23%)</title><rect x="55.5556%" y="629" width="1.2346%" height="15" fill="rgb(248,123,6)" fg:x="45" fg:w="1"/><text x="55.8056%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (1 samples, 1.23%)</title><rect x="55.5556%" y="613" width="1.2346%" height="15" fill="rgb(206,91,31)" fg:x="45" fg:w="1"/><text x="55.8056%" y="623.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 1.23%)</title><rect x="55.5556%" y="597" width="1.2346%" height="15" fill="rgb(211,154,13)" fg:x="45" fg:w="1"/><text x="55.8056%" y="607.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.23%)</title><rect x="55.5556%" y="581" width="1.2346%" height="15" fill="rgb(225,148,7)" fg:x="45" fg:w="1"/><text x="55.8056%" y="591.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.23%)</title><rect x="55.5556%" y="565" width="1.2346%" height="15" fill="rgb(220,160,43)" fg:x="45" fg:w="1"/><text x="55.8056%" y="575.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.23%)</title><rect x="55.5556%" y="549" width="1.2346%" height="15" fill="rgb(213,52,39)" fg:x="45" fg:w="1"/><text x="55.8056%" y="559.50"></text></g><g><title>app::engine::Engine::read_orderbooks::{{closure}} (9 samples, 11.11%)</title><rect x="46.9136%" y="645" width="11.1111%" height="15" fill="rgb(243,137,7)" fg:x="38" fg:w="9"/><text x="47.1636%" y="655.50">app::engine::Eng..</text></g><g><title>serde_json::de::from_str (1 samples, 1.23%)</title><rect x="56.7901%" y="629" width="1.2346%" height="15" fill="rgb(230,79,13)" fg:x="46" fg:w="1"/><text x="57.0401%" y="639.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 1.23%)</title><rect x="56.7901%" y="613" width="1.2346%" height="15" fill="rgb(247,105,23)" fg:x="46" fg:w="1"/><text x="57.0401%" y="623.50"></text></g><g><title>serde_core::de::impls::&lt;impl serde_core::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 1.23%)</title><rect x="56.7901%" y="597" width="1.2346%" height="15" fill="rgb(223,179,41)" fg:x="46" fg:w="1"/><text x="57.0401%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde_core::de::Deserializer&gt;::deserialize_map (1 samples, 1.23%)</title><rect x="56.7901%" y="581" width="1.2346%" height="15" fill="rgb(218,9,34)" fg:x="46" fg:w="1"/><text x="57.0401%" y="591.50"></text></g><g><title>&lt;serde_core::de::impls::&lt;impl serde_core::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize::MapVisitor&lt;K,V,S&gt; as serde_core::de::Visitor&gt;::visit_map (1 samples, 1.23%)</title><rect x="56.7901%" y="565" width="1.2346%" height="15" fill="rgb(222,106,8)" fg:x="46" fg:w="1"/><text x="57.0401%" y="575.50"></text></g><g><title>serde_core::de::MapAccess::next_entry (1 samples, 1.23%)</title><rect x="56.7901%" y="549" width="1.2346%" height="15" fill="rgb(211,220,0)" fg:x="46" fg:w="1"/><text x="57.0401%" y="559.50"></text></g><g><title>serde_core::de::MapAccess::next_entry_seed (1 samples, 1.23%)</title><rect x="56.7901%" y="533" width="1.2346%" height="15" fill="rgb(229,52,16)" fg:x="46" fg:w="1"/><text x="57.0401%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde_core::de::MapAccess&gt;::next_value_seed (1 samples, 1.23%)</title><rect x="56.7901%" y="517" width="1.2346%" height="15" fill="rgb(212,155,18)" fg:x="46" fg:w="1"/><text x="57.0401%" y="527.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde_core::de::DeserializeSeed&gt;::deserialize (1 samples, 1.23%)</title><rect x="56.7901%" y="501" width="1.2346%" height="15" fill="rgb(242,21,14)" fg:x="46" fg:w="1"/><text x="57.0401%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_core::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 1.23%)</title><rect x="56.7901%" y="485" width="1.2346%" height="15" fill="rgb(222,19,48)" fg:x="46" fg:w="1"/><text x="57.0401%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde_core::de::Deserializer&gt;::deserialize_any (1 samples, 1.23%)</title><rect x="56.7901%" y="469" width="1.2346%" height="15" fill="rgb(232,45,27)" fg:x="46" fg:w="1"/><text x="57.0401%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde_core::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde_core::de::Visitor&gt;::visit_map (1 samples, 1.23%)</title><rect x="56.7901%" y="453" width="1.2346%" height="15" fill="rgb(249,103,42)" fg:x="46" fg:w="1"/><text x="57.0401%" y="463.50"></text></g><g><title>serde_core::de::MapAccess::next_entry (1 samples, 1.23%)</title><rect x="56.7901%" y="437" width="1.2346%" height="15" fill="rgb(246,81,33)" fg:x="46" fg:w="1"/><text x="57.0401%" y="447.50"></text></g><g><title>serde_core::de::MapAccess::next_entry_seed (1 samples, 1.23%)</title><rect x="56.7901%" y="421" width="1.2346%" height="15" fill="rgb(252,33,42)" fg:x="46" fg:w="1"/><text x="57.0401%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde_core::de::MapAccess&gt;::next_value_seed (1 samples, 1.23%)</title><rect x="56.7901%" y="405" width="1.2346%" height="15" fill="rgb(209,212,41)" fg:x="46" fg:w="1"/><text x="57.0401%" y="415.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde_core::de::DeserializeSeed&gt;::deserialize (1 samples, 1.23%)</title><rect x="56.7901%" y="389" width="1.2346%" height="15" fill="rgb(207,154,6)" fg:x="46" fg:w="1"/><text x="57.0401%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_core::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 1.23%)</title><rect x="56.7901%" y="373" width="1.2346%" height="15" fill="rgb(223,64,47)" fg:x="46" fg:w="1"/><text x="57.0401%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde_core::de::Deserializer&gt;::deserialize_any (1 samples, 1.23%)</title><rect x="56.7901%" y="357" width="1.2346%" height="15" fill="rgb(211,161,38)" fg:x="46" fg:w="1"/><text x="57.0401%" y="367.50"></text></g><g><title>serde_core::de::Visitor::visit_borrowed_str (1 samples, 1.23%)</title><rect x="56.7901%" y="341" width="1.2346%" height="15" fill="rgb(219,138,40)" fg:x="46" fg:w="1"/><text x="57.0401%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde_core::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde_core::de::Visitor&gt;::visit_str (1 samples, 1.23%)</title><rect x="56.7901%" y="325" width="1.2346%" height="15" fill="rgb(241,228,46)" fg:x="46" fg:w="1"/><text x="57.0401%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 1.23%)</title><rect x="56.7901%" y="309" width="1.2346%" height="15" fill="rgb(223,209,38)" fg:x="46" fg:w="1"/><text x="57.0401%" y="319.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 1.23%)</title><rect x="56.7901%" y="293" width="1.2346%" height="15" fill="rgb(236,164,45)" fg:x="46" fg:w="1"/><text x="57.0401%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 1.23%)</title><rect x="56.7901%" y="277" width="1.2346%" height="15" fill="rgb(231,15,5)" fg:x="46" fg:w="1"/><text x="57.0401%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 1.23%)</title><rect x="56.7901%" y="261" width="1.2346%" height="15" fill="rgb(252,35,15)" fg:x="46" fg:w="1"/><text x="57.0401%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 1.23%)</title><rect x="56.7901%" y="245" width="1.2346%" height="15" fill="rgb(248,181,18)" fg:x="46" fg:w="1"/><text x="57.0401%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (1 samples, 1.23%)</title><rect x="56.7901%" y="229" width="1.2346%" height="15" fill="rgb(233,39,42)" fg:x="46" fg:w="1"/><text x="57.0401%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 1.23%)</title><rect x="56.7901%" y="213" width="1.2346%" height="15" fill="rgb(238,110,33)" fg:x="46" fg:w="1"/><text x="57.0401%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 1.23%)</title><rect x="56.7901%" y="197" width="1.2346%" height="15" fill="rgb(233,195,10)" fg:x="46" fg:w="1"/><text x="57.0401%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 1.23%)</title><rect x="56.7901%" y="181" width="1.2346%" height="15" fill="rgb(254,105,3)" fg:x="46" fg:w="1"/><text x="57.0401%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 1.23%)</title><rect x="56.7901%" y="165" width="1.2346%" height="15" fill="rgb(221,225,9)" fg:x="46" fg:w="1"/><text x="57.0401%" y="175.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.23%)</title><rect x="56.7901%" y="149" width="1.2346%" height="15" fill="rgb(224,227,45)" fg:x="46" fg:w="1"/><text x="57.0401%" y="159.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.23%)</title><rect x="56.7901%" y="133" width="1.2346%" height="15" fill="rgb(229,198,43)" fg:x="46" fg:w="1"/><text x="57.0401%" y="143.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.23%)</title><rect x="56.7901%" y="117" width="1.2346%" height="15" fill="rgb(206,209,35)" fg:x="46" fg:w="1"/><text x="57.0401%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 1.23%)</title><rect x="58.0247%" y="645" width="1.2346%" height="15" fill="rgb(245,195,53)" fg:x="47" fg:w="1"/><text x="58.2747%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 1.23%)</title><rect x="58.0247%" y="629" width="1.2346%" height="15" fill="rgb(240,92,26)" fg:x="47" fg:w="1"/><text x="58.2747%" y="639.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.23%)</title><rect x="58.0247%" y="613" width="1.2346%" height="15" fill="rgb(207,40,23)" fg:x="47" fg:w="1"/><text x="58.2747%" y="623.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.23%)</title><rect x="58.0247%" y="597" width="1.2346%" height="15" fill="rgb(223,111,35)" fg:x="47" fg:w="1"/><text x="58.2747%" y="607.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.23%)</title><rect x="58.0247%" y="581" width="1.2346%" height="15" fill="rgb(229,147,28)" fg:x="47" fg:w="1"/><text x="58.2747%" y="591.50"></text></g><g><title>app::engine::Engine::read_all_orderbooks::{{closure}}::{{closure}} (11 samples, 13.58%)</title><rect x="46.9136%" y="661" width="13.5802%" height="15" fill="rgb(211,29,28)" fg:x="38" fg:w="11"/><text x="47.1636%" y="671.50">app::engine::Engine::..</text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (1 samples, 1.23%)</title><rect x="59.2593%" y="645" width="1.2346%" height="15" fill="rgb(228,72,33)" fg:x="48" fg:w="1"/><text x="59.5093%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 1.23%)</title><rect x="59.2593%" y="629" width="1.2346%" height="15" fill="rgb(205,214,31)" fg:x="48" fg:w="1"/><text x="59.5093%" y="639.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.23%)</title><rect x="59.2593%" y="613" width="1.2346%" height="15" fill="rgb(224,111,15)" fg:x="48" fg:w="1"/><text x="59.5093%" y="623.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.23%)</title><rect x="59.2593%" y="597" width="1.2346%" height="15" fill="rgb(253,21,26)" fg:x="48" fg:w="1"/><text x="59.5093%" y="607.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.23%)</title><rect x="59.2593%" y="581" width="1.2346%" height="15" fill="rgb(245,139,43)" fg:x="48" fg:w="1"/><text x="59.5093%" y="591.50"></text></g><g><title>123145479188480 (33 samples, 40.74%)</title><rect x="38.2716%" y="1669" width="40.7407%" height="15" fill="rgb(252,170,7)" fg:x="31" fg:w="33"/><text x="38.5216%" y="1679.50">123145479188480</text></g><g><title>__pthread_start (29 samples, 35.80%)</title><rect x="43.2099%" y="1653" width="35.8025%" height="15" fill="rgb(231,118,14)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1663.50">__pthread_start</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (29 samples, 35.80%)</title><rect x="43.2099%" y="1637" width="35.8025%" height="15" fill="rgb(238,83,0)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1647.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (29 samples, 35.80%)</title><rect x="43.2099%" y="1621" width="35.8025%" height="15" fill="rgb(221,39,39)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1631.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Arg..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (29 samples, 35.80%)</title><rect x="43.2099%" y="1605" width="35.8025%" height="15" fill="rgb(222,119,46)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1615.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Arg..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (29 samples, 35.80%)</title><rect x="43.2099%" y="1589" width="35.8025%" height="15" fill="rgb(222,165,49)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1599.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (29 samples, 35.80%)</title><rect x="43.2099%" y="1573" width="35.8025%" height="15" fill="rgb(219,113,52)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1583.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (29 samples, 35.80%)</title><rect x="43.2099%" y="1557" width="35.8025%" height="15" fill="rgb(214,7,15)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1567.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (29 samples, 35.80%)</title><rect x="43.2099%" y="1541" width="35.8025%" height="15" fill="rgb(235,32,4)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1551.50">std::panicking::try</text></g><g><title>___rust_try (29 samples, 35.80%)</title><rect x="43.2099%" y="1525" width="35.8025%" height="15" fill="rgb(238,90,54)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1535.50">___rust_try</text></g><g><title>std::panicking::try::do_call (29 samples, 35.80%)</title><rect x="43.2099%" y="1509" width="35.8025%" height="15" fill="rgb(213,208,19)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1519.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (29 samples, 35.80%)</title><rect x="43.2099%" y="1493" width="35.8025%" height="15" fill="rgb(233,156,4)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1503.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::op..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (29 samples, 35.80%)</title><rect x="43.2099%" y="1477" width="35.8025%" height="15" fill="rgb(207,194,5)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1487.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{clo..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (29 samples, 35.80%)</title><rect x="43.2099%" y="1461" width="35.8025%" height="15" fill="rgb(206,111,30)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1471.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (29 samples, 35.80%)</title><rect x="43.2099%" y="1445" width="35.8025%" height="15" fill="rgb(243,70,54)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1455.50">tokio::runtime::blocking::pool::Spawner::spawn_thread::{{c..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (29 samples, 35.80%)</title><rect x="43.2099%" y="1429" width="35.8025%" height="15" fill="rgb(242,28,8)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1439.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::blocking::pool::Task::run (29 samples, 35.80%)</title><rect x="43.2099%" y="1413" width="35.8025%" height="15" fill="rgb(219,106,18)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1423.50">tokio::runtime::blocking::pool::Task::run</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (29 samples, 35.80%)</title><rect x="43.2099%" y="1397" width="35.8025%" height="15" fill="rgb(244,222,10)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1407.50">tokio::runtime::task::UnownedTask&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (29 samples, 35.80%)</title><rect x="43.2099%" y="1381" width="35.8025%" height="15" fill="rgb(236,179,52)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1391.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::raw::poll (29 samples, 35.80%)</title><rect x="43.2099%" y="1365" width="35.8025%" height="15" fill="rgb(213,23,39)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1375.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (29 samples, 35.80%)</title><rect x="43.2099%" y="1349" width="35.8025%" height="15" fill="rgb(238,48,10)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1359.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (29 samples, 35.80%)</title><rect x="43.2099%" y="1333" width="35.8025%" height="15" fill="rgb(251,196,23)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1343.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::harness::poll_future (29 samples, 35.80%)</title><rect x="43.2099%" y="1317" width="35.8025%" height="15" fill="rgb(250,152,24)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1327.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (29 samples, 35.80%)</title><rect x="43.2099%" y="1301" width="35.8025%" height="15" fill="rgb(209,150,17)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1311.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (29 samples, 35.80%)</title><rect x="43.2099%" y="1285" width="35.8025%" height="15" fill="rgb(234,202,34)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1295.50">std::panicking::try</text></g><g><title>___rust_try (29 samples, 35.80%)</title><rect x="43.2099%" y="1269" width="35.8025%" height="15" fill="rgb(253,148,53)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1279.50">___rust_try</text></g><g><title>std::panicking::try::do_call (29 samples, 35.80%)</title><rect x="43.2099%" y="1253" width="35.8025%" height="15" fill="rgb(218,129,16)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1263.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (29 samples, 35.80%)</title><rect x="43.2099%" y="1237" width="35.8025%" height="15" fill="rgb(216,85,19)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1247.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::op..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (29 samples, 35.80%)</title><rect x="43.2099%" y="1221" width="35.8025%" height="15" fill="rgb(235,228,7)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1231.50">tokio::runtime::task::harness::poll_future::{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (29 samples, 35.80%)</title><rect x="43.2099%" y="1205" width="35.8025%" height="15" fill="rgb(245,175,0)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1215.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (29 samples, 35.80%)</title><rect x="43.2099%" y="1189" width="35.8025%" height="15" fill="rgb(208,168,36)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1199.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (29 samples, 35.80%)</title><rect x="43.2099%" y="1173" width="35.8025%" height="15" fill="rgb(246,171,24)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1183.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}}</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (29 samples, 35.80%)</title><rect x="43.2099%" y="1157" width="35.8025%" height="15" fill="rgb(215,142,24)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1167.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}} (29 samples, 35.80%)</title><rect x="43.2099%" y="1141" width="35.8025%" height="15" fill="rgb(250,187,7)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1151.50">tokio::runtime::scheduler::multi_thread::worker::Launch::l..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (29 samples, 35.80%)</title><rect x="43.2099%" y="1125" width="35.8025%" height="15" fill="rgb(228,66,33)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1135.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (29 samples, 35.80%)</title><rect x="43.2099%" y="1109" width="35.8025%" height="15" fill="rgb(234,215,21)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1119.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}} (29 samples, 35.80%)</title><rect x="43.2099%" y="1093" width="35.8025%" height="15" fill="rgb(222,191,20)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1103.50">tokio::runtime::scheduler::multi_thread::worker::run::{{cl..</text></g><g><title>tokio::runtime::context::set_scheduler (29 samples, 35.80%)</title><rect x="43.2099%" y="1077" width="35.8025%" height="15" fill="rgb(245,79,54)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1087.50">tokio::runtime::context::set_scheduler</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (29 samples, 35.80%)</title><rect x="43.2099%" y="1061" width="35.8025%" height="15" fill="rgb(240,10,37)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1071.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (29 samples, 35.80%)</title><rect x="43.2099%" y="1045" width="35.8025%" height="15" fill="rgb(214,192,32)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1055.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>tokio::runtime::context::set_scheduler::{{closure}} (29 samples, 35.80%)</title><rect x="43.2099%" y="1029" width="35.8025%" height="15" fill="rgb(209,36,54)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1039.50">tokio::runtime::context::set_scheduler::{{closure}}</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (29 samples, 35.80%)</title><rect x="43.2099%" y="1013" width="35.8025%" height="15" fill="rgb(220,10,11)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1023.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}}::{{closure}} (29 samples, 35.80%)</title><rect x="43.2099%" y="997" width="35.8025%" height="15" fill="rgb(221,106,17)" fg:x="35" fg:w="29"/><text x="43.4599%" y="1007.50">tokio::runtime::scheduler::multi_thread::worker::run::{{cl..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (29 samples, 35.80%)</title><rect x="43.2099%" y="981" width="35.8025%" height="15" fill="rgb(251,142,44)" fg:x="35" fg:w="29"/><text x="43.4599%" y="991.50">tokio::runtime::scheduler::multi_thread::worker::Context::..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (26 samples, 32.10%)</title><rect x="46.9136%" y="965" width="32.0988%" height="15" fill="rgb(238,13,15)" fg:x="38" fg:w="26"/><text x="47.1636%" y="975.50">tokio::runtime::scheduler::multi_thread::worker::Con..</text></g><g><title>tokio::task::coop::budget (26 samples, 32.10%)</title><rect x="46.9136%" y="949" width="32.0988%" height="15" fill="rgb(208,107,27)" fg:x="38" fg:w="26"/><text x="47.1636%" y="959.50">tokio::task::coop::budget</text></g><g><title>tokio::task::coop::with_budget (26 samples, 32.10%)</title><rect x="46.9136%" y="933" width="32.0988%" height="15" fill="rgb(205,136,37)" fg:x="38" fg:w="26"/><text x="47.1636%" y="943.50">tokio::task::coop::with_budget</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}} (26 samples, 32.10%)</title><rect x="46.9136%" y="917" width="32.0988%" height="15" fill="rgb(250,205,27)" fg:x="38" fg:w="26"/><text x="47.1636%" y="927.50">tokio::runtime::scheduler::multi_thread::worker::Con..</text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (26 samples, 32.10%)</title><rect x="46.9136%" y="901" width="32.0988%" height="15" fill="rgb(210,80,43)" fg:x="38" fg:w="26"/><text x="47.1636%" y="911.50">tokio::runtime::task::LocalNotified&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (26 samples, 32.10%)</title><rect x="46.9136%" y="885" width="32.0988%" height="15" fill="rgb(247,160,36)" fg:x="38" fg:w="26"/><text x="47.1636%" y="895.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::raw::poll (26 samples, 32.10%)</title><rect x="46.9136%" y="869" width="32.0988%" height="15" fill="rgb(234,13,49)" fg:x="38" fg:w="26"/><text x="47.1636%" y="879.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (26 samples, 32.10%)</title><rect x="46.9136%" y="853" width="32.0988%" height="15" fill="rgb(234,122,0)" fg:x="38" fg:w="26"/><text x="47.1636%" y="863.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (26 samples, 32.10%)</title><rect x="46.9136%" y="837" width="32.0988%" height="15" fill="rgb(207,146,38)" fg:x="38" fg:w="26"/><text x="47.1636%" y="847.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_in..</text></g><g><title>tokio::runtime::task::harness::poll_future (26 samples, 32.10%)</title><rect x="46.9136%" y="821" width="32.0988%" height="15" fill="rgb(207,177,25)" fg:x="38" fg:w="26"/><text x="47.1636%" y="831.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (26 samples, 32.10%)</title><rect x="46.9136%" y="805" width="32.0988%" height="15" fill="rgb(211,178,42)" fg:x="38" fg:w="26"/><text x="47.1636%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (26 samples, 32.10%)</title><rect x="46.9136%" y="789" width="32.0988%" height="15" fill="rgb(230,69,54)" fg:x="38" fg:w="26"/><text x="47.1636%" y="799.50">std::panicking::try</text></g><g><title>___rust_try (26 samples, 32.10%)</title><rect x="46.9136%" y="773" width="32.0988%" height="15" fill="rgb(214,135,41)" fg:x="38" fg:w="26"/><text x="47.1636%" y="783.50">___rust_try</text></g><g><title>std::panicking::try::do_call (26 samples, 32.10%)</title><rect x="46.9136%" y="757" width="32.0988%" height="15" fill="rgb(237,67,25)" fg:x="38" fg:w="26"/><text x="47.1636%" y="767.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (26 samples, 32.10%)</title><rect x="46.9136%" y="741" width="32.0988%" height="15" fill="rgb(222,189,50)" fg:x="38" fg:w="26"/><text x="47.1636%" y="751.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as co..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (26 samples, 32.10%)</title><rect x="46.9136%" y="725" width="32.0988%" height="15" fill="rgb(245,148,34)" fg:x="38" fg:w="26"/><text x="47.1636%" y="735.50">tokio::runtime::task::harness::poll_future::{{closur..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (26 samples, 32.10%)</title><rect x="46.9136%" y="709" width="32.0988%" height="15" fill="rgb(222,29,6)" fg:x="38" fg:w="26"/><text x="47.1636%" y="719.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (26 samples, 32.10%)</title><rect x="46.9136%" y="693" width="32.0988%" height="15" fill="rgb(221,189,43)" fg:x="38" fg:w="26"/><text x="47.1636%" y="703.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_m..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (26 samples, 32.10%)</title><rect x="46.9136%" y="677" width="32.0988%" height="15" fill="rgb(207,36,27)" fg:x="38" fg:w="26"/><text x="47.1636%" y="687.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closu..</text></g><g><title>app::main::{{closure}}::{{closure}} (15 samples, 18.52%)</title><rect x="60.4938%" y="661" width="18.5185%" height="15" fill="rgb(217,90,24)" fg:x="49" fg:w="15"/><text x="60.7438%" y="671.50">app::main::{{closure}}::{{clo..</text></g><g><title>app::engine::Engine::read_all_orderbooks::{{closure}} (15 samples, 18.52%)</title><rect x="60.4938%" y="645" width="18.5185%" height="15" fill="rgb(224,66,35)" fg:x="49" fg:w="15"/><text x="60.7438%" y="655.50">app::engine::Engine::read_all..</text></g><g><title>std::io::stdio::_print (15 samples, 18.52%)</title><rect x="60.4938%" y="629" width="18.5185%" height="15" fill="rgb(221,13,50)" fg:x="49" fg:w="15"/><text x="60.7438%" y="639.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to (15 samples, 18.52%)</title><rect x="60.4938%" y="613" width="18.5185%" height="15" fill="rgb(236,68,49)" fg:x="49" fg:w="15"/><text x="60.7438%" y="623.50">std::io::stdio::print_to</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (15 samples, 18.52%)</title><rect x="60.4938%" y="597" width="18.5185%" height="15" fill="rgb(229,146,28)" fg:x="49" fg:w="15"/><text x="60.7438%" y="607.50">&lt;std::io::stdio::Stdout as st..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (15 samples, 18.52%)</title><rect x="60.4938%" y="581" width="18.5185%" height="15" fill="rgb(225,31,38)" fg:x="49" fg:w="15"/><text x="60.7438%" y="591.50">&lt;&amp;std::io::stdio::Stdout as s..</text></g><g><title>std::io::Write::write_fmt (15 samples, 18.52%)</title><rect x="60.4938%" y="565" width="18.5185%" height="15" fill="rgb(250,208,3)" fg:x="49" fg:w="15"/><text x="60.7438%" y="575.50">std::io::Write::write_fmt</text></g><g><title>std::io::default_write_fmt (15 samples, 18.52%)</title><rect x="60.4938%" y="549" width="18.5185%" height="15" fill="rgb(246,54,23)" fg:x="49" fg:w="15"/><text x="60.7438%" y="559.50">std::io::default_write_fmt</text></g><g><title>core::fmt::write (15 samples, 18.52%)</title><rect x="60.4938%" y="533" width="18.5185%" height="15" fill="rgb(243,76,11)" fg:x="49" fg:w="15"/><text x="60.7438%" y="543.50">core::fmt::write</text></g><g><title>&lt;std::io::default_write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (15 samples, 18.52%)</title><rect x="60.4938%" y="517" width="18.5185%" height="15" fill="rgb(245,21,50)" fg:x="49" fg:w="15"/><text x="60.7438%" y="527.50">&lt;std::io::default_write_fmt::..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (15 samples, 18.52%)</title><rect x="60.4938%" y="501" width="18.5185%" height="15" fill="rgb(228,9,43)" fg:x="49" fg:w="15"/><text x="60.7438%" y="511.50">&lt;std::io::stdio::StdoutLock a..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (15 samples, 18.52%)</title><rect x="60.4938%" y="485" width="18.5185%" height="15" fill="rgb(208,100,47)" fg:x="49" fg:w="15"/><text x="60.7438%" y="495.50">&lt;std::io::buffered::linewrite..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (15 samples, 18.52%)</title><rect x="60.4938%" y="469" width="18.5185%" height="15" fill="rgb(232,26,8)" fg:x="49" fg:w="15"/><text x="60.7438%" y="479.50">&lt;std::io::buffered::linewrite..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (15 samples, 18.52%)</title><rect x="60.4938%" y="453" width="18.5185%" height="15" fill="rgb(216,166,38)" fg:x="49" fg:w="15"/><text x="60.7438%" y="463.50">std::io::buffered::bufwriter:..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (15 samples, 18.52%)</title><rect x="60.4938%" y="437" width="18.5185%" height="15" fill="rgb(251,202,51)" fg:x="49" fg:w="15"/><text x="60.7438%" y="447.50">&lt;std::io::stdio::StdoutRaw as..</text></g><g><title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (15 samples, 18.52%)</title><rect x="60.4938%" y="421" width="18.5185%" height="15" fill="rgb(254,216,34)" fg:x="49" fg:w="15"/><text x="60.7438%" y="431.50">&lt;std::sys::stdio::unix::Stdou..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (15 samples, 18.52%)</title><rect x="60.4938%" y="405" width="18.5185%" height="15" fill="rgb(251,32,27)" fg:x="49" fg:w="15"/><text x="60.7438%" y="415.50">std::sys::pal::unix::fd::File..</text></g><g><title>_write (15 samples, 18.52%)</title><rect x="60.4938%" y="389" width="18.5185%" height="15" fill="rgb(208,127,28)" fg:x="49" fg:w="15"/><text x="60.7438%" y="399.50">_write</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (15 samples, 18.52%)</title><rect x="60.4938%" y="373" width="18.5185%" height="15" fill="rgb(224,137,22)" fg:x="49" fg:w="15"/><text x="60.7438%" y="383.50">&lt;pprof::backtrace::backtrace_..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (15 samples, 18.52%)</title><rect x="60.4938%" y="357" width="18.5185%" height="15" fill="rgb(254,70,32)" fg:x="49" fg:w="15"/><text x="60.7438%" y="367.50">backtrace::backtrace::trace_u..</text></g><g><title>backtrace::backtrace::libunwind::trace (15 samples, 18.52%)</title><rect x="60.4938%" y="341" width="18.5185%" height="15" fill="rgb(229,75,37)" fg:x="49" fg:w="15"/><text x="60.7438%" y="351.50">backtrace::backtrace::libunwi..</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 2.47%)</title><rect x="79.0123%" y="1653" width="2.4691%" height="15" fill="rgb(252,64,23)" fg:x="64" fg:w="2"/><text x="79.2623%" y="1663.50">&lt;p..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 2.47%)</title><rect x="79.0123%" y="1637" width="2.4691%" height="15" fill="rgb(232,162,48)" fg:x="64" fg:w="2"/><text x="79.2623%" y="1647.50">ba..</text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 2.47%)</title><rect x="79.0123%" y="1621" width="2.4691%" height="15" fill="rgb(246,160,12)" fg:x="64" fg:w="2"/><text x="79.2623%" y="1631.50">ba..</text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::end_processing_scheduled_tasks (1 samples, 1.23%)</title><rect x="81.4815%" y="965" width="1.2346%" height="15" fill="rgb(247,166,0)" fg:x="66" fg:w="1"/><text x="81.7315%" y="975.50"></text></g><g><title>__floatuntidf (1 samples, 1.23%)</title><rect x="81.4815%" y="949" width="1.2346%" height="15" fill="rgb(249,219,21)" fg:x="66" fg:w="1"/><text x="81.7315%" y="959.50"></text></g><g><title>compiler_builtins::float::conv::__floatuntidf (1 samples, 1.23%)</title><rect x="81.4815%" y="933" width="1.2346%" height="15" fill="rgb(205,209,3)" fg:x="66" fg:w="1"/><text x="81.7315%" y="943.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::from_bits (1 samples, 1.23%)</title><rect x="81.4815%" y="917" width="1.2346%" height="15" fill="rgb(243,44,1)" fg:x="66" fg:w="1"/><text x="81.7315%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.23%)</title><rect x="81.4815%" y="901" width="1.2346%" height="15" fill="rgb(206,159,16)" fg:x="66" fg:w="1"/><text x="81.7315%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.23%)</title><rect x="81.4815%" y="885" width="1.2346%" height="15" fill="rgb(244,77,30)" fg:x="66" fg:w="1"/><text x="81.7315%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.23%)</title><rect x="81.4815%" y="869" width="1.2346%" height="15" fill="rgb(218,69,12)" fg:x="66" fg:w="1"/><text x="81.7315%" y="879.50"></text></g><g><title>app::engine::Engine::read_orderbooks::{{closure}} (4 samples, 4.94%)</title><rect x="82.7160%" y="645" width="4.9383%" height="15" fill="rgb(212,87,7)" fg:x="67" fg:w="4"/><text x="82.9660%" y="655.50">app::e..</text></g><g><title>&lt;futures_util::stream::stream::next::Next&lt;St&gt; as core::future::future::Future&gt;::poll (4 samples, 4.94%)</title><rect x="82.7160%" y="629" width="4.9383%" height="15" fill="rgb(245,114,25)" fg:x="67" fg:w="4"/><text x="82.9660%" y="639.50">&lt;futur..</text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (4 samples, 4.94%)</title><rect x="82.7160%" y="613" width="4.9383%" height="15" fill="rgb(210,61,42)" fg:x="67" fg:w="4"/><text x="82.9660%" y="623.50">future..</text></g><g><title>&lt;futures_util::stream::stream::split::SplitStream&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (4 samples, 4.94%)</title><rect x="82.7160%" y="597" width="4.9383%" height="15" fill="rgb(211,52,33)" fg:x="67" fg:w="4"/><text x="82.9660%" y="607.50">&lt;futur..</text></g><g><title>&lt;tokio_tungstenite::WebSocketStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (4 samples, 4.94%)</title><rect x="82.7160%" y="581" width="4.9383%" height="15" fill="rgb(234,58,33)" fg:x="67" fg:w="4"/><text x="82.9660%" y="591.50">&lt;tokio..</text></g><g><title>tokio_tungstenite::WebSocketStream&lt;S&gt;::with_context (4 samples, 4.94%)</title><rect x="82.7160%" y="565" width="4.9383%" height="15" fill="rgb(220,115,36)" fg:x="67" fg:w="4"/><text x="82.9660%" y="575.50">tokio_..</text></g><g><title>&lt;tokio_tungstenite::WebSocketStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next::{{closure}} (4 samples, 4.94%)</title><rect x="82.7160%" y="549" width="4.9383%" height="15" fill="rgb(243,153,54)" fg:x="67" fg:w="4"/><text x="82.9660%" y="559.50">&lt;tokio..</text></g><g><title>tungstenite::protocol::WebSocket&lt;Stream&gt;::read (4 samples, 4.94%)</title><rect x="82.7160%" y="533" width="4.9383%" height="15" fill="rgb(251,47,18)" fg:x="67" fg:w="4"/><text x="82.9660%" y="543.50">tungst..</text></g><g><title>tungstenite::protocol::WebSocketContext::read (4 samples, 4.94%)</title><rect x="82.7160%" y="517" width="4.9383%" height="15" fill="rgb(242,102,42)" fg:x="67" fg:w="4"/><text x="82.9660%" y="527.50">tungst..</text></g><g><title>tungstenite::protocol::WebSocketContext::read_message_frame (4 samples, 4.94%)</title><rect x="82.7160%" y="501" width="4.9383%" height="15" fill="rgb(234,31,38)" fg:x="67" fg:w="4"/><text x="82.9660%" y="511.50">tungst..</text></g><g><title>tungstenite::protocol::frame::FrameCodec::read_frame (4 samples, 4.94%)</title><rect x="82.7160%" y="485" width="4.9383%" height="15" fill="rgb(221,117,51)" fg:x="67" fg:w="4"/><text x="82.9660%" y="495.50">tungst..</text></g><g><title>tungstenite::protocol::frame::FrameCodec::read_in (4 samples, 4.94%)</title><rect x="82.7160%" y="469" width="4.9383%" height="15" fill="rgb(212,20,18)" fg:x="67" fg:w="4"/><text x="82.9660%" y="479.50">tungst..</text></g><g><title>&lt;tokio_tungstenite::compat::AllowStd&lt;S&gt; as std::io::Read&gt;::read (4 samples, 4.94%)</title><rect x="82.7160%" y="453" width="4.9383%" height="15" fill="rgb(245,133,36)" fg:x="67" fg:w="4"/><text x="82.9660%" y="463.50">&lt;tokio..</text></g><g><title>tokio_tungstenite::compat::AllowStd&lt;S&gt;::with_context (4 samples, 4.94%)</title><rect x="82.7160%" y="437" width="4.9383%" height="15" fill="rgb(212,6,19)" fg:x="67" fg:w="4"/><text x="82.9660%" y="447.50">tokio_..</text></g><g><title>&lt;tokio_tungstenite::compat::AllowStd&lt;S&gt; as std::io::Read&gt;::read::{{closure}} (4 samples, 4.94%)</title><rect x="82.7160%" y="421" width="4.9383%" height="15" fill="rgb(218,1,36)" fg:x="67" fg:w="4"/><text x="82.9660%" y="431.50">&lt;tokio..</text></g><g><title>&lt;tokio_tungstenite::stream::MaybeTlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (4 samples, 4.94%)</title><rect x="82.7160%" y="405" width="4.9383%" height="15" fill="rgb(246,84,54)" fg:x="67" fg:w="4"/><text x="82.9660%" y="415.50">&lt;tokio..</text></g><g><title>&lt;tokio_rustls::client::TlsStream&lt;IO&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (4 samples, 4.94%)</title><rect x="82.7160%" y="389" width="4.9383%" height="15" fill="rgb(242,110,6)" fg:x="67" fg:w="4"/><text x="82.9660%" y="399.50">&lt;tokio..</text></g><g><title>&lt;tokio_rustls::client::TlsStream&lt;IO&gt; as tokio::io::async_buf_read::AsyncBufRead&gt;::poll_fill_buf (4 samples, 4.94%)</title><rect x="82.7160%" y="373" width="4.9383%" height="15" fill="rgb(214,47,5)" fg:x="67" fg:w="4"/><text x="82.9660%" y="383.50">&lt;tokio..</text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::poll_fill_buf (4 samples, 4.94%)</title><rect x="82.7160%" y="357" width="4.9383%" height="15" fill="rgb(218,159,25)" fg:x="67" fg:w="4"/><text x="82.9660%" y="367.50">tokio_..</text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (4 samples, 4.94%)</title><rect x="82.7160%" y="341" width="4.9383%" height="15" fill="rgb(215,211,28)" fg:x="67" fg:w="4"/><text x="82.9660%" y="351.50">tokio_..</text></g><g><title>rustls::conn::ConnectionCommon&lt;Data&gt;::read_tls (4 samples, 4.94%)</title><rect x="82.7160%" y="325" width="4.9383%" height="15" fill="rgb(238,59,32)" fg:x="67" fg:w="4"/><text x="82.9660%" y="335.50">rustls..</text></g><g><title>rustls::msgs::deframer::buffers::DeframerVecBuffer::read (4 samples, 4.94%)</title><rect x="82.7160%" y="309" width="4.9383%" height="15" fill="rgb(226,82,3)" fg:x="67" fg:w="4"/><text x="82.9660%" y="319.50">rustls..</text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (4 samples, 4.94%)</title><rect x="82.7160%" y="293" width="4.9383%" height="15" fill="rgb(240,164,32)" fg:x="67" fg:w="4"/><text x="82.9660%" y="303.50">&lt;tokio..</text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (4 samples, 4.94%)</title><rect x="82.7160%" y="277" width="4.9383%" height="15" fill="rgb(232,46,7)" fg:x="67" fg:w="4"/><text x="82.9660%" y="287.50">&lt;&amp;mut ..</text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (4 samples, 4.94%)</title><rect x="82.7160%" y="261" width="4.9383%" height="15" fill="rgb(229,129,53)" fg:x="67" fg:w="4"/><text x="82.9660%" y="271.50">&lt;tokio..</text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (4 samples, 4.94%)</title><rect x="82.7160%" y="245" width="4.9383%" height="15" fill="rgb(234,188,29)" fg:x="67" fg:w="4"/><text x="82.9660%" y="255.50">tokio:..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (4 samples, 4.94%)</title><rect x="82.7160%" y="229" width="4.9383%" height="15" fill="rgb(246,141,4)" fg:x="67" fg:w="4"/><text x="82.9660%" y="239.50">tokio:..</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (4 samples, 4.94%)</title><rect x="82.7160%" y="213" width="4.9383%" height="15" fill="rgb(229,23,39)" fg:x="67" fg:w="4"/><text x="82.9660%" y="223.50">&lt;&amp;mio:..</text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (4 samples, 4.94%)</title><rect x="82.7160%" y="197" width="4.9383%" height="15" fill="rgb(206,12,3)" fg:x="67" fg:w="4"/><text x="82.9660%" y="207.50">mio::i..</text></g><g><title>mio::sys::unix::selector::stateless_io_source::IoSourceState::do_io (4 samples, 4.94%)</title><rect x="82.7160%" y="181" width="4.9383%" height="15" fill="rgb(252,226,20)" fg:x="67" fg:w="4"/><text x="82.9660%" y="191.50">mio::s..</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::{{closure}} (4 samples, 4.94%)</title><rect x="82.7160%" y="165" width="4.9383%" height="15" fill="rgb(216,123,35)" fg:x="67" fg:w="4"/><text x="82.9660%" y="175.50">&lt;&amp;mio:..</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (4 samples, 4.94%)</title><rect x="82.7160%" y="149" width="4.9383%" height="15" fill="rgb(212,68,40)" fg:x="67" fg:w="4"/><text x="82.9660%" y="159.50">&lt;&amp;std:..</text></g><g><title>std::sys::net::connection::socket::TcpStream::read (4 samples, 4.94%)</title><rect x="82.7160%" y="133" width="4.9383%" height="15" fill="rgb(254,125,32)" fg:x="67" fg:w="4"/><text x="82.9660%" y="143.50">std::s..</text></g><g><title>std::sys::net::connection::socket::unix::Socket::read (4 samples, 4.94%)</title><rect x="82.7160%" y="117" width="4.9383%" height="15" fill="rgb(253,97,22)" fg:x="67" fg:w="4"/><text x="82.9660%" y="127.50">std::s..</text></g><g><title>std::sys::net::connection::socket::unix::Socket::recv_with_flags (4 samples, 4.94%)</title><rect x="82.7160%" y="101" width="4.9383%" height="15" fill="rgb(241,101,14)" fg:x="67" fg:w="4"/><text x="82.9660%" y="111.50">std::s..</text></g><g><title>_recvfrom (4 samples, 4.94%)</title><rect x="82.7160%" y="85" width="4.9383%" height="15" fill="rgb(238,103,29)" fg:x="67" fg:w="4"/><text x="82.9660%" y="95.50">_recvf..</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (4 samples, 4.94%)</title><rect x="82.7160%" y="69" width="4.9383%" height="15" fill="rgb(233,195,47)" fg:x="67" fg:w="4"/><text x="82.9660%" y="79.50">&lt;pprof..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (4 samples, 4.94%)</title><rect x="82.7160%" y="53" width="4.9383%" height="15" fill="rgb(246,218,30)" fg:x="67" fg:w="4"/><text x="82.9660%" y="63.50">backtr..</text></g><g><title>backtrace::backtrace::libunwind::trace (4 samples, 4.94%)</title><rect x="82.7160%" y="37" width="4.9383%" height="15" fill="rgb(219,145,47)" fg:x="67" fg:w="4"/><text x="82.9660%" y="47.50">backtr..</text></g><g><title>app::engine::Engine::read_all_orderbooks::{{closure}}::{{closure}} (5 samples, 6.17%)</title><rect x="82.7160%" y="661" width="6.1728%" height="15" fill="rgb(243,12,26)" fg:x="67" fg:w="5"/><text x="82.9660%" y="671.50">app::eng..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 1.23%)</title><rect x="87.6543%" y="645" width="1.2346%" height="15" fill="rgb(214,87,16)" fg:x="71" fg:w="1"/><text x="87.9043%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,serde_json::value::Value,std::hash::random::RandomState&gt;&gt; (1 samples, 1.23%)</title><rect x="87.6543%" y="629" width="1.2346%" height="15" fill="rgb(208,99,42)" fg:x="71" fg:w="1"/><text x="87.9043%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,serde_json::value::Value)&gt;&gt; (1 samples, 1.23%)</title><rect x="87.6543%" y="613" width="1.2346%" height="15" fill="rgb(253,99,2)" fg:x="71" fg:w="1"/><text x="87.9043%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.23%)</title><rect x="87.6543%" y="597" width="1.2346%" height="15" fill="rgb(220,168,23)" fg:x="71" fg:w="1"/><text x="87.9043%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 1.23%)</title><rect x="87.6543%" y="581" width="1.2346%" height="15" fill="rgb(242,38,24)" fg:x="71" fg:w="1"/><text x="87.9043%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (1 samples, 1.23%)</title><rect x="87.6543%" y="565" width="1.2346%" height="15" fill="rgb(225,182,9)" fg:x="71" fg:w="1"/><text x="87.9043%" y="575.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 1.23%)</title><rect x="87.6543%" y="549" width="1.2346%" height="15" fill="rgb(243,178,37)" fg:x="71" fg:w="1"/><text x="87.9043%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 1.23%)</title><rect x="87.6543%" y="533" width="1.2346%" height="15" fill="rgb(232,139,19)" fg:x="71" fg:w="1"/><text x="87.9043%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,serde_json::value::Value)&gt; (1 samples, 1.23%)</title><rect x="87.6543%" y="517" width="1.2346%" height="15" fill="rgb(225,201,24)" fg:x="71" fg:w="1"/><text x="87.9043%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 1.23%)</title><rect x="87.6543%" y="501" width="1.2346%" height="15" fill="rgb(221,47,46)" fg:x="71" fg:w="1"/><text x="87.9043%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 1.23%)</title><rect x="87.6543%" y="485" width="1.2346%" height="15" fill="rgb(249,23,13)" fg:x="71" fg:w="1"/><text x="87.9043%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 1.23%)</title><rect x="87.6543%" y="469" width="1.2346%" height="15" fill="rgb(219,9,5)" fg:x="71" fg:w="1"/><text x="87.9043%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.23%)</title><rect x="87.6543%" y="453" width="1.2346%" height="15" fill="rgb(254,171,16)" fg:x="71" fg:w="1"/><text x="87.9043%" y="463.50"></text></g><g><title>core::mem::drop (1 samples, 1.23%)</title><rect x="87.6543%" y="437" width="1.2346%" height="15" fill="rgb(230,171,20)" fg:x="71" fg:w="1"/><text x="87.9043%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 1.23%)</title><rect x="87.6543%" y="421" width="1.2346%" height="15" fill="rgb(210,71,41)" fg:x="71" fg:w="1"/><text x="87.9043%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.23%)</title><rect x="87.6543%" y="405" width="1.2346%" height="15" fill="rgb(206,173,20)" fg:x="71" fg:w="1"/><text x="87.9043%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (1 samples, 1.23%)</title><rect x="87.6543%" y="389" width="1.2346%" height="15" fill="rgb(233,88,34)" fg:x="71" fg:w="1"/><text x="87.9043%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (1 samples, 1.23%)</title><rect x="87.6543%" y="373" width="1.2346%" height="15" fill="rgb(223,209,46)" fg:x="71" fg:w="1"/><text x="87.9043%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.23%)</title><rect x="87.6543%" y="357" width="1.2346%" height="15" fill="rgb(250,43,18)" fg:x="71" fg:w="1"/><text x="87.9043%" y="367.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (1 samples, 1.23%)</title><rect x="87.6543%" y="341" width="1.2346%" height="15" fill="rgb(208,13,10)" fg:x="71" fg:w="1"/><text x="87.9043%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 1.23%)</title><rect x="87.6543%" y="325" width="1.2346%" height="15" fill="rgb(212,200,36)" fg:x="71" fg:w="1"/><text x="87.9043%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (1 samples, 1.23%)</title><rect x="87.6543%" y="309" width="1.2346%" height="15" fill="rgb(225,90,30)" fg:x="71" fg:w="1"/><text x="87.9043%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;serde_json::value::Value&gt;&gt; (1 samples, 1.23%)</title><rect x="87.6543%" y="293" width="1.2346%" height="15" fill="rgb(236,182,39)" fg:x="71" fg:w="1"/><text x="87.9043%" y="303.50"></text></g><g><title>__rustc::__rdl_dealloc (1 samples, 1.23%)</title><rect x="87.6543%" y="277" width="1.2346%" height="15" fill="rgb(212,144,35)" fg:x="71" fg:w="1"/><text x="87.9043%" y="287.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.23%)</title><rect x="87.6543%" y="261" width="1.2346%" height="15" fill="rgb(228,63,44)" fg:x="71" fg:w="1"/><text x="87.9043%" y="271.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.23%)</title><rect x="87.6543%" y="245" width="1.2346%" height="15" fill="rgb(228,109,6)" fg:x="71" fg:w="1"/><text x="87.9043%" y="255.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.23%)</title><rect x="87.6543%" y="229" width="1.2346%" height="15" fill="rgb(238,117,24)" fg:x="71" fg:w="1"/><text x="87.9043%" y="239.50"></text></g><g><title>std::io::stdio::_print (6 samples, 7.41%)</title><rect x="88.8889%" y="629" width="7.4074%" height="15" fill="rgb(242,26,26)" fg:x="72" fg:w="6"/><text x="89.1389%" y="639.50">std::io::s..</text></g><g><title>std::io::stdio::print_to (6 samples, 7.41%)</title><rect x="88.8889%" y="613" width="7.4074%" height="15" fill="rgb(221,92,48)" fg:x="72" fg:w="6"/><text x="89.1389%" y="623.50">std::io::s..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (6 samples, 7.41%)</title><rect x="88.8889%" y="597" width="7.4074%" height="15" fill="rgb(209,209,32)" fg:x="72" fg:w="6"/><text x="89.1389%" y="607.50">&lt;std::io::..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (6 samples, 7.41%)</title><rect x="88.8889%" y="581" width="7.4074%" height="15" fill="rgb(221,70,22)" fg:x="72" fg:w="6"/><text x="89.1389%" y="591.50">&lt;&amp;std::io:..</text></g><g><title>std::io::Write::write_fmt (6 samples, 7.41%)</title><rect x="88.8889%" y="565" width="7.4074%" height="15" fill="rgb(248,145,5)" fg:x="72" fg:w="6"/><text x="89.1389%" y="575.50">std::io::W..</text></g><g><title>std::io::default_write_fmt (6 samples, 7.41%)</title><rect x="88.8889%" y="549" width="7.4074%" height="15" fill="rgb(226,116,26)" fg:x="72" fg:w="6"/><text x="89.1389%" y="559.50">std::io::d..</text></g><g><title>core::fmt::write (6 samples, 7.41%)</title><rect x="88.8889%" y="533" width="7.4074%" height="15" fill="rgb(244,5,17)" fg:x="72" fg:w="6"/><text x="89.1389%" y="543.50">core::fmt:..</text></g><g><title>&lt;std::io::default_write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (6 samples, 7.41%)</title><rect x="88.8889%" y="517" width="7.4074%" height="15" fill="rgb(252,159,33)" fg:x="72" fg:w="6"/><text x="89.1389%" y="527.50">&lt;std::io::..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (6 samples, 7.41%)</title><rect x="88.8889%" y="501" width="7.4074%" height="15" fill="rgb(206,71,0)" fg:x="72" fg:w="6"/><text x="89.1389%" y="511.50">&lt;std::io::..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (6 samples, 7.41%)</title><rect x="88.8889%" y="485" width="7.4074%" height="15" fill="rgb(233,118,54)" fg:x="72" fg:w="6"/><text x="89.1389%" y="495.50">&lt;std::io::..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (6 samples, 7.41%)</title><rect x="88.8889%" y="469" width="7.4074%" height="15" fill="rgb(234,83,48)" fg:x="72" fg:w="6"/><text x="89.1389%" y="479.50">&lt;std::io::..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (6 samples, 7.41%)</title><rect x="88.8889%" y="453" width="7.4074%" height="15" fill="rgb(228,3,54)" fg:x="72" fg:w="6"/><text x="89.1389%" y="463.50">std::io::b..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (6 samples, 7.41%)</title><rect x="88.8889%" y="437" width="7.4074%" height="15" fill="rgb(226,155,13)" fg:x="72" fg:w="6"/><text x="89.1389%" y="447.50">&lt;std::io::..</text></g><g><title>&lt;std::sys::stdio::unix::Stdout as std::io::Write&gt;::write (6 samples, 7.41%)</title><rect x="88.8889%" y="421" width="7.4074%" height="15" fill="rgb(241,28,37)" fg:x="72" fg:w="6"/><text x="89.1389%" y="431.50">&lt;std::sys:..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (6 samples, 7.41%)</title><rect x="88.8889%" y="405" width="7.4074%" height="15" fill="rgb(233,93,10)" fg:x="72" fg:w="6"/><text x="89.1389%" y="415.50">std::sys::..</text></g><g><title>_write (6 samples, 7.41%)</title><rect x="88.8889%" y="389" width="7.4074%" height="15" fill="rgb(225,113,19)" fg:x="72" fg:w="6"/><text x="89.1389%" y="399.50">_write</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (6 samples, 7.41%)</title><rect x="88.8889%" y="373" width="7.4074%" height="15" fill="rgb(241,2,18)" fg:x="72" fg:w="6"/><text x="89.1389%" y="383.50">&lt;pprof::ba..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (6 samples, 7.41%)</title><rect x="88.8889%" y="357" width="7.4074%" height="15" fill="rgb(228,207,21)" fg:x="72" fg:w="6"/><text x="89.1389%" y="367.50">backtrace:..</text></g><g><title>backtrace::backtrace::libunwind::trace (6 samples, 7.41%)</title><rect x="88.8889%" y="341" width="7.4074%" height="15" fill="rgb(213,211,35)" fg:x="72" fg:w="6"/><text x="89.1389%" y="351.50">backtrace:..</text></g><g><title>123145481297920 (15 samples, 18.52%)</title><rect x="79.0123%" y="1669" width="18.5185%" height="15" fill="rgb(209,83,10)" fg:x="64" fg:w="15"/><text x="79.2623%" y="1679.50">123145481297920</text></g><g><title>__pthread_start (13 samples, 16.05%)</title><rect x="81.4815%" y="1653" width="16.0494%" height="15" fill="rgb(209,164,1)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1663.50">__pthread_start</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (13 samples, 16.05%)</title><rect x="81.4815%" y="1637" width="16.0494%" height="15" fill="rgb(213,184,43)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1647.50">std::sys::pal::unix::thre..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (13 samples, 16.05%)</title><rect x="81.4815%" y="1621" width="16.0494%" height="15" fill="rgb(231,61,34)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1631.50">&lt;alloc::boxed::Box&lt;F,A&gt; a..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (13 samples, 16.05%)</title><rect x="81.4815%" y="1605" width="16.0494%" height="15" fill="rgb(235,75,3)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1615.50">&lt;alloc::boxed::Box&lt;F,A&gt; a..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (13 samples, 16.05%)</title><rect x="81.4815%" y="1589" width="16.0494%" height="15" fill="rgb(220,106,47)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1599.50">core::ops::function::FnOn..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (13 samples, 16.05%)</title><rect x="81.4815%" y="1573" width="16.0494%" height="15" fill="rgb(210,196,33)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1583.50">std::thread::Builder::spa..</text></g><g><title>std::panic::catch_unwind (13 samples, 16.05%)</title><rect x="81.4815%" y="1557" width="16.0494%" height="15" fill="rgb(229,154,42)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1567.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (13 samples, 16.05%)</title><rect x="81.4815%" y="1541" width="16.0494%" height="15" fill="rgb(228,114,26)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1551.50">std::panicking::try</text></g><g><title>___rust_try (13 samples, 16.05%)</title><rect x="81.4815%" y="1525" width="16.0494%" height="15" fill="rgb(208,144,1)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1535.50">___rust_try</text></g><g><title>std::panicking::try::do_call (13 samples, 16.05%)</title><rect x="81.4815%" y="1509" width="16.0494%" height="15" fill="rgb(239,112,37)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1519.50">std::panicking::try::do_c..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (13 samples, 16.05%)</title><rect x="81.4815%" y="1493" width="16.0494%" height="15" fill="rgb(210,96,50)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1503.50">&lt;core::panic::unwind_safe..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (13 samples, 16.05%)</title><rect x="81.4815%" y="1477" width="16.0494%" height="15" fill="rgb(222,178,2)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1487.50">std::thread::Builder::spa..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (13 samples, 16.05%)</title><rect x="81.4815%" y="1461" width="16.0494%" height="15" fill="rgb(226,74,18)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1471.50">std::sys::backtrace::__ru..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (13 samples, 16.05%)</title><rect x="81.4815%" y="1445" width="16.0494%" height="15" fill="rgb(225,67,54)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1455.50">tokio::runtime::blocking:..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (13 samples, 16.05%)</title><rect x="81.4815%" y="1429" width="16.0494%" height="15" fill="rgb(251,92,32)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1439.50">tokio::runtime::blocking:..</text></g><g><title>tokio::runtime::blocking::pool::Task::run (13 samples, 16.05%)</title><rect x="81.4815%" y="1413" width="16.0494%" height="15" fill="rgb(228,149,22)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1423.50">tokio::runtime::blocking:..</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (13 samples, 16.05%)</title><rect x="81.4815%" y="1397" width="16.0494%" height="15" fill="rgb(243,54,13)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1407.50">tokio::runtime::task::Uno..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (13 samples, 16.05%)</title><rect x="81.4815%" y="1381" width="16.0494%" height="15" fill="rgb(243,180,28)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1391.50">tokio::runtime::task::raw..</text></g><g><title>tokio::runtime::task::raw::poll (13 samples, 16.05%)</title><rect x="81.4815%" y="1365" width="16.0494%" height="15" fill="rgb(208,167,24)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1375.50">tokio::runtime::task::raw..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (13 samples, 16.05%)</title><rect x="81.4815%" y="1349" width="16.0494%" height="15" fill="rgb(245,73,45)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1359.50">tokio::runtime::task::har..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (13 samples, 16.05%)</title><rect x="81.4815%" y="1333" width="16.0494%" height="15" fill="rgb(237,203,48)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1343.50">tokio::runtime::task::har..</text></g><g><title>tokio::runtime::task::harness::poll_future (13 samples, 16.05%)</title><rect x="81.4815%" y="1317" width="16.0494%" height="15" fill="rgb(211,197,16)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1327.50">tokio::runtime::task::har..</text></g><g><title>std::panic::catch_unwind (13 samples, 16.05%)</title><rect x="81.4815%" y="1301" width="16.0494%" height="15" fill="rgb(243,99,51)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1311.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (13 samples, 16.05%)</title><rect x="81.4815%" y="1285" width="16.0494%" height="15" fill="rgb(215,123,29)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1295.50">std::panicking::try</text></g><g><title>___rust_try (13 samples, 16.05%)</title><rect x="81.4815%" y="1269" width="16.0494%" height="15" fill="rgb(239,186,37)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1279.50">___rust_try</text></g><g><title>std::panicking::try::do_call (13 samples, 16.05%)</title><rect x="81.4815%" y="1253" width="16.0494%" height="15" fill="rgb(252,136,39)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1263.50">std::panicking::try::do_c..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (13 samples, 16.05%)</title><rect x="81.4815%" y="1237" width="16.0494%" height="15" fill="rgb(223,213,32)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1247.50">&lt;core::panic::unwind_safe..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (13 samples, 16.05%)</title><rect x="81.4815%" y="1221" width="16.0494%" height="15" fill="rgb(233,115,5)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1231.50">tokio::runtime::task::har..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (13 samples, 16.05%)</title><rect x="81.4815%" y="1205" width="16.0494%" height="15" fill="rgb(207,226,44)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1215.50">tokio::runtime::task::cor..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (13 samples, 16.05%)</title><rect x="81.4815%" y="1189" width="16.0494%" height="15" fill="rgb(208,126,0)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1199.50">tokio::loom::std::unsafe_..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (13 samples, 16.05%)</title><rect x="81.4815%" y="1173" width="16.0494%" height="15" fill="rgb(244,66,21)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1183.50">tokio::runtime::task::cor..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (13 samples, 16.05%)</title><rect x="81.4815%" y="1157" width="16.0494%" height="15" fill="rgb(222,97,12)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1167.50">&lt;tokio::runtime::blocking..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}} (13 samples, 16.05%)</title><rect x="81.4815%" y="1141" width="16.0494%" height="15" fill="rgb(219,213,19)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1151.50">tokio::runtime::scheduler..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (13 samples, 16.05%)</title><rect x="81.4815%" y="1125" width="16.0494%" height="15" fill="rgb(252,169,30)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1135.50">tokio::runtime::scheduler..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (13 samples, 16.05%)</title><rect x="81.4815%" y="1109" width="16.0494%" height="15" fill="rgb(206,32,51)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1119.50">tokio::runtime::context::..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}} (13 samples, 16.05%)</title><rect x="81.4815%" y="1093" width="16.0494%" height="15" fill="rgb(250,172,42)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1103.50">tokio::runtime::scheduler..</text></g><g><title>tokio::runtime::context::set_scheduler (13 samples, 16.05%)</title><rect x="81.4815%" y="1077" width="16.0494%" height="15" fill="rgb(209,34,43)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1087.50">tokio::runtime::context::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (13 samples, 16.05%)</title><rect x="81.4815%" y="1061" width="16.0494%" height="15" fill="rgb(223,11,35)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1071.50">std::thread::local::Local..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (13 samples, 16.05%)</title><rect x="81.4815%" y="1045" width="16.0494%" height="15" fill="rgb(251,219,26)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1055.50">std::thread::local::Local..</text></g><g><title>tokio::runtime::context::set_scheduler::{{closure}} (13 samples, 16.05%)</title><rect x="81.4815%" y="1029" width="16.0494%" height="15" fill="rgb(231,119,3)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1039.50">tokio::runtime::context::..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (13 samples, 16.05%)</title><rect x="81.4815%" y="1013" width="16.0494%" height="15" fill="rgb(216,97,11)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1023.50">tokio::runtime::context::..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}}::{{closure}} (13 samples, 16.05%)</title><rect x="81.4815%" y="997" width="16.0494%" height="15" fill="rgb(223,59,9)" fg:x="66" fg:w="13"/><text x="81.7315%" y="1007.50">tokio::runtime::scheduler..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (13 samples, 16.05%)</title><rect x="81.4815%" y="981" width="16.0494%" height="15" fill="rgb(233,93,31)" fg:x="66" fg:w="13"/><text x="81.7315%" y="991.50">tokio::runtime::scheduler..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (12 samples, 14.81%)</title><rect x="82.7160%" y="965" width="14.8148%" height="15" fill="rgb(239,81,33)" fg:x="67" fg:w="12"/><text x="82.9660%" y="975.50">tokio::runtime::schedul..</text></g><g><title>tokio::task::coop::budget (12 samples, 14.81%)</title><rect x="82.7160%" y="949" width="14.8148%" height="15" fill="rgb(213,120,34)" fg:x="67" fg:w="12"/><text x="82.9660%" y="959.50">tokio::task::coop::budg..</text></g><g><title>tokio::task::coop::with_budget (12 samples, 14.81%)</title><rect x="82.7160%" y="933" width="14.8148%" height="15" fill="rgb(243,49,53)" fg:x="67" fg:w="12"/><text x="82.9660%" y="943.50">tokio::task::coop::with..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}} (12 samples, 14.81%)</title><rect x="82.7160%" y="917" width="14.8148%" height="15" fill="rgb(247,216,33)" fg:x="67" fg:w="12"/><text x="82.9660%" y="927.50">tokio::runtime::schedul..</text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (12 samples, 14.81%)</title><rect x="82.7160%" y="901" width="14.8148%" height="15" fill="rgb(226,26,14)" fg:x="67" fg:w="12"/><text x="82.9660%" y="911.50">tokio::runtime::task::L..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (12 samples, 14.81%)</title><rect x="82.7160%" y="885" width="14.8148%" height="15" fill="rgb(215,49,53)" fg:x="67" fg:w="12"/><text x="82.9660%" y="895.50">tokio::runtime::task::r..</text></g><g><title>tokio::runtime::task::raw::poll (12 samples, 14.81%)</title><rect x="82.7160%" y="869" width="14.8148%" height="15" fill="rgb(245,162,40)" fg:x="67" fg:w="12"/><text x="82.9660%" y="879.50">tokio::runtime::task::r..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (12 samples, 14.81%)</title><rect x="82.7160%" y="853" width="14.8148%" height="15" fill="rgb(229,68,17)" fg:x="67" fg:w="12"/><text x="82.9660%" y="863.50">tokio::runtime::task::h..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (12 samples, 14.81%)</title><rect x="82.7160%" y="837" width="14.8148%" height="15" fill="rgb(213,182,10)" fg:x="67" fg:w="12"/><text x="82.9660%" y="847.50">tokio::runtime::task::h..</text></g><g><title>tokio::runtime::task::harness::poll_future (12 samples, 14.81%)</title><rect x="82.7160%" y="821" width="14.8148%" height="15" fill="rgb(245,125,30)" fg:x="67" fg:w="12"/><text x="82.9660%" y="831.50">tokio::runtime::task::h..</text></g><g><title>std::panic::catch_unwind (12 samples, 14.81%)</title><rect x="82.7160%" y="805" width="14.8148%" height="15" fill="rgb(232,202,2)" fg:x="67" fg:w="12"/><text x="82.9660%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (12 samples, 14.81%)</title><rect x="82.7160%" y="789" width="14.8148%" height="15" fill="rgb(237,140,51)" fg:x="67" fg:w="12"/><text x="82.9660%" y="799.50">std::panicking::try</text></g><g><title>___rust_try (12 samples, 14.81%)</title><rect x="82.7160%" y="773" width="14.8148%" height="15" fill="rgb(236,157,25)" fg:x="67" fg:w="12"/><text x="82.9660%" y="783.50">___rust_try</text></g><g><title>std::panicking::try::do_call (12 samples, 14.81%)</title><rect x="82.7160%" y="757" width="14.8148%" height="15" fill="rgb(219,209,0)" fg:x="67" fg:w="12"/><text x="82.9660%" y="767.50">std::panicking::try::do..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (12 samples, 14.81%)</title><rect x="82.7160%" y="741" width="14.8148%" height="15" fill="rgb(240,116,54)" fg:x="67" fg:w="12"/><text x="82.9660%" y="751.50">&lt;core::panic::unwind_sa..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (12 samples, 14.81%)</title><rect x="82.7160%" y="725" width="14.8148%" height="15" fill="rgb(216,10,36)" fg:x="67" fg:w="12"/><text x="82.9660%" y="735.50">tokio::runtime::task::h..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (12 samples, 14.81%)</title><rect x="82.7160%" y="709" width="14.8148%" height="15" fill="rgb(222,72,44)" fg:x="67" fg:w="12"/><text x="82.9660%" y="719.50">tokio::runtime::task::c..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (12 samples, 14.81%)</title><rect x="82.7160%" y="693" width="14.8148%" height="15" fill="rgb(232,159,9)" fg:x="67" fg:w="12"/><text x="82.9660%" y="703.50">tokio::loom::std::unsaf..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (12 samples, 14.81%)</title><rect x="82.7160%" y="677" width="14.8148%" height="15" fill="rgb(210,39,32)" fg:x="67" fg:w="12"/><text x="82.9660%" y="687.50">tokio::runtime::task::c..</text></g><g><title>app::main::{{closure}}::{{closure}} (7 samples, 8.64%)</title><rect x="88.8889%" y="661" width="8.6420%" height="15" fill="rgb(216,194,45)" fg:x="72" fg:w="7"/><text x="89.1389%" y="671.50">app::main::{..</text></g><g><title>app::engine::Engine::read_all_orderbooks::{{closure}} (7 samples, 8.64%)</title><rect x="88.8889%" y="645" width="8.6420%" height="15" fill="rgb(218,18,35)" fg:x="72" fg:w="7"/><text x="89.1389%" y="655.50">app::engine:..</text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (1 samples, 1.23%)</title><rect x="96.2963%" y="629" width="1.2346%" height="15" fill="rgb(207,83,51)" fg:x="78" fg:w="1"/><text x="96.5463%" y="639.50"></text></g><g><title>&lt;core::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="96.2963%" y="613" width="1.2346%" height="15" fill="rgb(225,63,43)" fg:x="78" fg:w="1"/><text x="96.5463%" y="623.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (1 samples, 1.23%)</title><rect x="96.2963%" y="597" width="1.2346%" height="15" fill="rgb(207,57,36)" fg:x="78" fg:w="1"/><text x="96.5463%" y="607.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (1 samples, 1.23%)</title><rect x="96.2963%" y="581" width="1.2346%" height="15" fill="rgb(216,99,33)" fg:x="78" fg:w="1"/><text x="96.5463%" y="591.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (1 samples, 1.23%)</title><rect x="96.2963%" y="565" width="1.2346%" height="15" fill="rgb(225,42,16)" fg:x="78" fg:w="1"/><text x="96.5463%" y="575.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 1.23%)</title><rect x="96.2963%" y="549" width="1.2346%" height="15" fill="rgb(220,201,45)" fg:x="78" fg:w="1"/><text x="96.5463%" y="559.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (1 samples, 1.23%)</title><rect x="96.2963%" y="533" width="1.2346%" height="15" fill="rgb(225,33,4)" fg:x="78" fg:w="1"/><text x="96.5463%" y="543.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (1 samples, 1.23%)</title><rect x="96.2963%" y="517" width="1.2346%" height="15" fill="rgb(224,33,50)" fg:x="78" fg:w="1"/><text x="96.5463%" y="527.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read (1 samples, 1.23%)</title><rect x="96.2963%" y="501" width="1.2346%" height="15" fill="rgb(246,198,51)" fg:x="78" fg:w="1"/><text x="96.5463%" y="511.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.23%)</title><rect x="96.2963%" y="485" width="1.2346%" height="15" fill="rgb(205,22,4)" fg:x="78" fg:w="1"/><text x="96.5463%" y="495.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.23%)</title><rect x="96.2963%" y="469" width="1.2346%" height="15" fill="rgb(206,3,8)" fg:x="78" fg:w="1"/><text x="96.5463%" y="479.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.23%)</title><rect x="96.2963%" y="453" width="1.2346%" height="15" fill="rgb(251,23,15)" fg:x="78" fg:w="1"/><text x="96.5463%" y="463.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.23%)</title><rect x="97.5309%" y="1653" width="1.2346%" height="15" fill="rgb(252,88,28)" fg:x="79" fg:w="1"/><text x="97.7809%" y="1663.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.23%)</title><rect x="97.5309%" y="1637" width="1.2346%" height="15" fill="rgb(212,127,14)" fg:x="79" fg:w="1"/><text x="97.7809%" y="1647.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.23%)</title><rect x="97.5309%" y="1621" width="1.2346%" height="15" fill="rgb(247,145,37)" fg:x="79" fg:w="1"/><text x="97.7809%" y="1631.50"></text></g><g><title>all (81 samples, 100%)</title><rect x="0.0000%" y="1685" width="100.0000%" height="15" fill="rgb(209,117,53)" fg:x="0" fg:w="81"/><text x="0.2500%" y="1695.50"></text></g><g><title>140704354179520 (2 samples, 2.47%)</title><rect x="97.5309%" y="1669" width="2.4691%" height="15" fill="rgb(212,90,42)" fg:x="79" fg:w="2"/><text x="97.7809%" y="1679.50">14..</text></g><g><title>_main (1 samples, 1.23%)</title><rect x="98.7654%" y="1653" width="1.2346%" height="15" fill="rgb(218,164,37)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1663.50"></text></g><g><title>std::rt::lang_start (1 samples, 1.23%)</title><rect x="98.7654%" y="1637" width="1.2346%" height="15" fill="rgb(246,65,34)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1647.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 1.23%)</title><rect x="98.7654%" y="1621" width="1.2346%" height="15" fill="rgb(231,100,33)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1631.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 1.23%)</title><rect x="98.7654%" y="1605" width="1.2346%" height="15" fill="rgb(228,126,14)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1615.50"></text></g><g><title>std::panicking::try (1 samples, 1.23%)</title><rect x="98.7654%" y="1589" width="1.2346%" height="15" fill="rgb(215,173,21)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1599.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 1.23%)</title><rect x="98.7654%" y="1573" width="1.2346%" height="15" fill="rgb(210,6,40)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1583.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (1 samples, 1.23%)</title><rect x="98.7654%" y="1557" width="1.2346%" height="15" fill="rgb(212,48,18)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1567.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 1.23%)</title><rect x="98.7654%" y="1541" width="1.2346%" height="15" fill="rgb(230,214,11)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1551.50"></text></g><g><title>std::panicking::try (1 samples, 1.23%)</title><rect x="98.7654%" y="1525" width="1.2346%" height="15" fill="rgb(254,105,39)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1535.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 1.23%)</title><rect x="98.7654%" y="1509" width="1.2346%" height="15" fill="rgb(245,158,5)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1519.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 1.23%)</title><rect x="98.7654%" y="1493" width="1.2346%" height="15" fill="rgb(249,208,11)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1503.50"></text></g><g><title>std::rt::lang_start::{{closure}} (1 samples, 1.23%)</title><rect x="98.7654%" y="1477" width="1.2346%" height="15" fill="rgb(210,39,28)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1487.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.23%)</title><rect x="98.7654%" y="1461" width="1.2346%" height="15" fill="rgb(211,56,53)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1471.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 1.23%)</title><rect x="98.7654%" y="1445" width="1.2346%" height="15" fill="rgb(226,201,30)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1455.50"></text></g><g><title>app::main (1 samples, 1.23%)</title><rect x="98.7654%" y="1429" width="1.2346%" height="15" fill="rgb(239,101,34)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1439.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (1 samples, 1.23%)</title><rect x="98.7654%" y="1413" width="1.2346%" height="15" fill="rgb(226,209,5)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1423.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on_inner (1 samples, 1.23%)</title><rect x="98.7654%" y="1397" width="1.2346%" height="15" fill="rgb(250,105,47)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1407.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (1 samples, 1.23%)</title><rect x="98.7654%" y="1381" width="1.2346%" height="15" fill="rgb(230,72,3)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1391.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1 samples, 1.23%)</title><rect x="98.7654%" y="1365" width="1.2346%" height="15" fill="rgb(232,218,39)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1375.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on::{{closure}} (1 samples, 1.23%)</title><rect x="98.7654%" y="1349" width="1.2346%" height="15" fill="rgb(248,166,6)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1359.50"></text></g><g><title>tokio::runtime::context::blocking::BlockingRegionGuard::block_on (1 samples, 1.23%)</title><rect x="98.7654%" y="1333" width="1.2346%" height="15" fill="rgb(247,89,20)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1343.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (1 samples, 1.23%)</title><rect x="98.7654%" y="1317" width="1.2346%" height="15" fill="rgb(248,130,54)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1327.50"></text></g><g><title>tokio::task::coop::budget (1 samples, 1.23%)</title><rect x="98.7654%" y="1301" width="1.2346%" height="15" fill="rgb(234,196,4)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1311.50"></text></g><g><title>tokio::task::coop::with_budget (1 samples, 1.23%)</title><rect x="98.7654%" y="1285" width="1.2346%" height="15" fill="rgb(250,143,31)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1295.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::{{closure}} (1 samples, 1.23%)</title><rect x="98.7654%" y="1269" width="1.2346%" height="15" fill="rgb(211,110,34)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1279.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="1253" width="1.2346%" height="15" fill="rgb(215,124,48)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1263.50"></text></g><g><title>app::main::{{closure}} (1 samples, 1.23%)</title><rect x="98.7654%" y="1237" width="1.2346%" height="15" fill="rgb(216,46,13)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1247.50"></text></g><g><title>app::engine::Engine::connect_to::{{closure}} (1 samples, 1.23%)</title><rect x="98.7654%" y="1221" width="1.2346%" height="15" fill="rgb(205,184,25)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1231.50"></text></g><g><title>&lt;app::exchange::kucoin::KuCoin as app::exchange::traits::Connectable&gt;::connect_with_subscription_async::{{closure}} (1 samples, 1.23%)</title><rect x="98.7654%" y="1205" width="1.2346%" height="15" fill="rgb(228,1,10)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1215.50"></text></g><g><title>app::exchange::kucoin::KuCoin::get_public_token::{{closure}} (1 samples, 1.23%)</title><rect x="98.7654%" y="1189" width="1.2346%" height="15" fill="rgb(213,116,27)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1199.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="1173" width="1.2346%" height="15" fill="rgb(241,95,50)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1183.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="1157" width="1.2346%" height="15" fill="rgb(238,48,32)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1167.50"></text></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="1141" width="1.2346%" height="15" fill="rgb(235,113,49)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1151.50"></text></g><g><title>&lt;tower_http::follow_redirect::ResponseFuture&lt;S,ReqBody,P&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="1125" width="1.2346%" height="15" fill="rgb(205,127,43)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1135.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="1109" width="1.2346%" height="15" fill="rgb(250,162,2)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1119.50"></text></g><g><title>&lt;tower::retry::future::ResponseFuture&lt;P,S,Request&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="1093" width="1.2346%" height="15" fill="rgb(220,13,41)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1103.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="1077" width="1.2346%" height="15" fill="rgb(249,221,25)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1087.50"></text></g><g><title>&lt;reqwest::async_impl::client::HyperService as tower_service::Service&lt;http::request::Request&lt;reqwest::async_impl::body::Body&gt;&gt;&gt;::call::{{closure}} (1 samples, 1.23%)</title><rect x="98.7654%" y="1061" width="1.2346%" height="15" fill="rgb(215,208,19)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1071.50"></text></g><g><title>&lt;hyper_util::client::legacy::client::ResponseFuture as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="1045" width="1.2346%" height="15" fill="rgb(236,175,2)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1055.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::send_request::{{closure}} (1 samples, 1.23%)</title><rect x="98.7654%" y="1029" width="1.2346%" height="15" fill="rgb(241,52,2)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1039.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::try_send_request::{{closure}} (1 samples, 1.23%)</title><rect x="98.7654%" y="1013" width="1.2346%" height="15" fill="rgb(248,140,14)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1023.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::connection_for::{{closure}} (1 samples, 1.23%)</title><rect x="98.7654%" y="997" width="1.2346%" height="15" fill="rgb(253,22,42)" fg:x="80" fg:w="1"/><text x="99.0154%" y="1007.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::one_connection_for::{{closure}} (1 samples, 1.23%)</title><rect x="98.7654%" y="981" width="1.2346%" height="15" fill="rgb(234,61,47)" fg:x="80" fg:w="1"/><text x="99.0154%" y="991.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="965" width="1.2346%" height="15" fill="rgb(208,226,15)" fg:x="80" fg:w="1"/><text x="99.0154%" y="975.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1 samples, 1.23%)</title><rect x="98.7654%" y="949" width="1.2346%" height="15" fill="rgb(217,221,4)" fg:x="80" fg:w="1"/><text x="99.0154%" y="959.50"></text></g><g><title>&lt;hyper_util::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="933" width="1.2346%" height="15" fill="rgb(212,174,34)" fg:x="80" fg:w="1"/><text x="99.0154%" y="943.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="917" width="1.2346%" height="15" fill="rgb(253,83,4)" fg:x="80" fg:w="1"/><text x="99.0154%" y="927.50"></text></g><g><title>&lt;futures_util::future::try_future::AndThen&lt;Fut1,Fut2,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="901" width="1.2346%" height="15" fill="rgb(250,195,49)" fg:x="80" fg:w="1"/><text x="99.0154%" y="911.50"></text></g><g><title>&lt;futures_util::future::try_future::TryFlatten&lt;Fut1,Fut2&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="885" width="1.2346%" height="15" fill="rgb(241,192,25)" fg:x="80" fg:w="1"/><text x="99.0154%" y="895.50"></text></g><g><title>&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="869" width="1.2346%" height="15" fill="rgb(208,124,10)" fg:x="80" fg:w="1"/><text x="99.0154%" y="879.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (1 samples, 1.23%)</title><rect x="98.7654%" y="853" width="1.2346%" height="15" fill="rgb(222,33,0)" fg:x="80" fg:w="1"/><text x="99.0154%" y="863.50"></text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="837" width="1.2346%" height="15" fill="rgb(234,209,28)" fg:x="80" fg:w="1"/><text x="99.0154%" y="847.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="821" width="1.2346%" height="15" fill="rgb(224,11,23)" fg:x="80" fg:w="1"/><text x="99.0154%" y="831.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="805" width="1.2346%" height="15" fill="rgb(232,99,1)" fg:x="80" fg:w="1"/><text x="99.0154%" y="815.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="789" width="1.2346%" height="15" fill="rgb(237,95,45)" fg:x="80" fg:w="1"/><text x="99.0154%" y="799.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (1 samples, 1.23%)</title><rect x="98.7654%" y="773" width="1.2346%" height="15" fill="rgb(208,109,11)" fg:x="80" fg:w="1"/><text x="99.0154%" y="783.50"></text></g><g><title>&lt;futures_util::future::try_future::MapErr&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="757" width="1.2346%" height="15" fill="rgb(216,190,48)" fg:x="80" fg:w="1"/><text x="99.0154%" y="767.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="741" width="1.2346%" height="15" fill="rgb(251,171,36)" fg:x="80" fg:w="1"/><text x="99.0154%" y="751.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="725" width="1.2346%" height="15" fill="rgb(230,62,22)" fg:x="80" fg:w="1"/><text x="99.0154%" y="735.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="709" width="1.2346%" height="15" fill="rgb(225,114,35)" fg:x="80" fg:w="1"/><text x="99.0154%" y="719.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (1 samples, 1.23%)</title><rect x="98.7654%" y="693" width="1.2346%" height="15" fill="rgb(215,118,42)" fg:x="80" fg:w="1"/><text x="99.0154%" y="703.50"></text></g><g><title>&lt;hyper_util::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="677" width="1.2346%" height="15" fill="rgb(243,119,21)" fg:x="80" fg:w="1"/><text x="99.0154%" y="687.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="661" width="1.2346%" height="15" fill="rgb(252,177,53)" fg:x="80" fg:w="1"/><text x="99.0154%" y="671.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 1.23%)</title><rect x="98.7654%" y="645" width="1.2346%" height="15" fill="rgb(237,209,29)" fg:x="80" fg:w="1"/><text x="99.0154%" y="655.50"></text></g><g><title>reqwest::connect::ConnectorService::connect_with_maybe_proxy::{{closure}} (1 samples, 1.23%)</title><rect x="98.7654%" y="629" width="1.2346%" height="15" fill="rgb(212,65,23)" fg:x="80" fg:w="1"/><text x="99.0154%" y="639.50"></text></g><g><title>&lt;hyper_tls::client::HttpsConnecting&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="613" width="1.2346%" height="15" fill="rgb(230,222,46)" fg:x="80" fg:w="1"/><text x="99.0154%" y="623.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="597" width="1.2346%" height="15" fill="rgb(215,135,32)" fg:x="80" fg:w="1"/><text x="99.0154%" y="607.50"></text></g><g><title>&lt;hyper_tls::client::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 1.23%)</title><rect x="98.7654%" y="581" width="1.2346%" height="15" fill="rgb(246,101,22)" fg:x="80" fg:w="1"/><text x="99.0154%" y="591.50"></text></g><g><title>tokio_native_tls::TlsConnector::connect::{{closure}} (1 samples, 1.23%)</title><rect x="98.7654%" y="565" width="1.2346%" height="15" fill="rgb(206,107,13)" fg:x="80" fg:w="1"/><text x="99.0154%" y="575.50"></text></g><g><title>tokio_native_tls::handshake::{{closure}} (1 samples, 1.23%)</title><rect x="98.7654%" y="549" width="1.2346%" height="15" fill="rgb(250,100,44)" fg:x="80" fg:w="1"/><text x="99.0154%" y="559.50"></text></g><g><title>&lt;tokio_native_tls::MidHandshake&lt;S&gt; as core::future::future::Future&gt;::poll (1 samples, 1.23%)</title><rect x="98.7654%" y="533" width="1.2346%" height="15" fill="rgb(231,147,38)" fg:x="80" fg:w="1"/><text x="99.0154%" y="543.50"></text></g><g><title>native_tls::MidHandshakeTlsStream&lt;S&gt;::handshake (1 samples, 1.23%)</title><rect x="98.7654%" y="517" width="1.2346%" height="15" fill="rgb(229,8,40)" fg:x="80" fg:w="1"/><text x="99.0154%" y="527.50"></text></g><g><title>native_tls::imp::MidHandshakeTlsStream&lt;S&gt;::handshake (1 samples, 1.23%)</title><rect x="98.7654%" y="501" width="1.2346%" height="15" fill="rgb(221,135,30)" fg:x="80" fg:w="1"/><text x="99.0154%" y="511.50"></text></g><g><title>security_framework::secure_transport::MidHandshakeClientBuilder&lt;S&gt;::handshake (1 samples, 1.23%)</title><rect x="98.7654%" y="485" width="1.2346%" height="15" fill="rgb(249,193,18)" fg:x="80" fg:w="1"/><text x="99.0154%" y="495.50"></text></g><g><title>security_framework::secure_transport::MidHandshakeSslStream&lt;S&gt;::handshake (1 samples, 1.23%)</title><rect x="98.7654%" y="469" width="1.2346%" height="15" fill="rgb(209,133,39)" fg:x="80" fg:w="1"/><text x="99.0154%" y="479.50"></text></g><g><title>security_framework::secure_transport::SslStream&lt;S&gt;::handshake (1 samples, 1.23%)</title><rect x="98.7654%" y="453" width="1.2346%" height="15" fill="rgb(232,100,14)" fg:x="80" fg:w="1"/><text x="99.0154%" y="463.50"></text></g><g><title>security_framework::secure_transport::write_func (1 samples, 1.23%)</title><rect x="98.7654%" y="437" width="1.2346%" height="15" fill="rgb(224,185,1)" fg:x="80" fg:w="1"/><text x="99.0154%" y="447.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 1.23%)</title><rect x="98.7654%" y="421" width="1.2346%" height="15" fill="rgb(223,139,8)" fg:x="80" fg:w="1"/><text x="99.0154%" y="431.50"></text></g><g><title>std::panicking::try (1 samples, 1.23%)</title><rect x="98.7654%" y="405" width="1.2346%" height="15" fill="rgb(232,213,38)" fg:x="80" fg:w="1"/><text x="99.0154%" y="415.50"></text></g><g><title>___rust_try (1 samples, 1.23%)</title><rect x="98.7654%" y="389" width="1.2346%" height="15" fill="rgb(207,94,22)" fg:x="80" fg:w="1"/><text x="99.0154%" y="399.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 1.23%)</title><rect x="98.7654%" y="373" width="1.2346%" height="15" fill="rgb(219,183,54)" fg:x="80" fg:w="1"/><text x="99.0154%" y="383.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 1.23%)</title><rect x="98.7654%" y="357" width="1.2346%" height="15" fill="rgb(216,185,54)" fg:x="80" fg:w="1"/><text x="99.0154%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 1.23%)</title><rect x="98.7654%" y="341" width="1.2346%" height="15" fill="rgb(254,217,39)" fg:x="80" fg:w="1"/><text x="99.0154%" y="351.50"></text></g><g><title>security_framework::secure_transport::write_func::{{closure}} (1 samples, 1.23%)</title><rect x="98.7654%" y="325" width="1.2346%" height="15" fill="rgb(240,178,23)" fg:x="80" fg:w="1"/><text x="99.0154%" y="335.50"></text></g><g><title>&lt;tokio_native_tls::AllowStd&lt;S&gt; as std::io::Write&gt;::write (1 samples, 1.23%)</title><rect x="98.7654%" y="309" width="1.2346%" height="15" fill="rgb(218,11,47)" fg:x="80" fg:w="1"/><text x="99.0154%" y="319.50"></text></g><g><title>tokio_native_tls::AllowStd&lt;S&gt;::with_context (1 samples, 1.23%)</title><rect x="98.7654%" y="293" width="1.2346%" height="15" fill="rgb(218,51,51)" fg:x="80" fg:w="1"/><text x="99.0154%" y="303.50"></text></g><g><title>&lt;tokio_native_tls::AllowStd&lt;S&gt; as std::io::Write&gt;::write::{{closure}} (1 samples, 1.23%)</title><rect x="98.7654%" y="277" width="1.2346%" height="15" fill="rgb(238,126,27)" fg:x="80" fg:w="1"/><text x="99.0154%" y="287.50"></text></g><g><title>&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 1.23%)</title><rect x="98.7654%" y="261" width="1.2346%" height="15" fill="rgb(249,202,22)" fg:x="80" fg:w="1"/><text x="99.0154%" y="271.50"></text></g><g><title>&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as hyper::rt::io::Write&gt;::poll_write (1 samples, 1.23%)</title><rect x="98.7654%" y="245" width="1.2346%" height="15" fill="rgb(254,195,49)" fg:x="80" fg:w="1"/><text x="99.0154%" y="255.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 1.23%)</title><rect x="98.7654%" y="229" width="1.2346%" height="15" fill="rgb(208,123,14)" fg:x="80" fg:w="1"/><text x="99.0154%" y="239.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (1 samples, 1.23%)</title><rect x="98.7654%" y="213" width="1.2346%" height="15" fill="rgb(224,200,8)" fg:x="80" fg:w="1"/><text x="99.0154%" y="223.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (1 samples, 1.23%)</title><rect x="98.7654%" y="197" width="1.2346%" height="15" fill="rgb(217,61,36)" fg:x="80" fg:w="1"/><text x="99.0154%" y="207.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (1 samples, 1.23%)</title><rect x="98.7654%" y="181" width="1.2346%" height="15" fill="rgb(206,35,45)" fg:x="80" fg:w="1"/><text x="99.0154%" y="191.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (1 samples, 1.23%)</title><rect x="98.7654%" y="165" width="1.2346%" height="15" fill="rgb(217,65,33)" fg:x="80" fg:w="1"/><text x="99.0154%" y="175.50"></text></g><g><title>mio::sys::unix::selector::stateless_io_source::IoSourceState::do_io (1 samples, 1.23%)</title><rect x="98.7654%" y="149" width="1.2346%" height="15" fill="rgb(222,158,48)" fg:x="80" fg:w="1"/><text x="99.0154%" y="159.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::{{closure}} (1 samples, 1.23%)</title><rect x="98.7654%" y="133" width="1.2346%" height="15" fill="rgb(254,2,54)" fg:x="80" fg:w="1"/><text x="99.0154%" y="143.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 1.23%)</title><rect x="98.7654%" y="117" width="1.2346%" height="15" fill="rgb(250,143,38)" fg:x="80" fg:w="1"/><text x="99.0154%" y="127.50"></text></g><g><title>std::sys::net::connection::socket::TcpStream::write (1 samples, 1.23%)</title><rect x="98.7654%" y="101" width="1.2346%" height="15" fill="rgb(248,25,0)" fg:x="80" fg:w="1"/><text x="99.0154%" y="111.50"></text></g><g><title>_sendto (1 samples, 1.23%)</title><rect x="98.7654%" y="85" width="1.2346%" height="15" fill="rgb(206,152,27)" fg:x="80" fg:w="1"/><text x="99.0154%" y="95.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.23%)</title><rect x="98.7654%" y="69" width="1.2346%" height="15" fill="rgb(240,77,30)" fg:x="80" fg:w="1"/><text x="99.0154%" y="79.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.23%)</title><rect x="98.7654%" y="53" width="1.2346%" height="15" fill="rgb(231,5,3)" fg:x="80" fg:w="1"/><text x="99.0154%" y="63.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.23%)</title><rect x="98.7654%" y="37" width="1.2346%" height="15" fill="rgb(207,226,32)" fg:x="80" fg:w="1"/><text x="99.0154%" y="47.50"></text></g></svg></svg>